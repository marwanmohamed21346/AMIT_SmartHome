
AMIT_TRANSMIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ed8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00001ed8  00001f6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800188  00800188  00002094  2**0
                  ALLOC
  3 .stab         000030f0  00000000  00000000  00002094  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016ad  00000000  00000000  00005184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006831  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00006991  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00006b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00008a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  00009b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ab58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000acd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000afbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_6>
      1c:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__vector_7>
      20:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__vector_8>
      24:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__vector_9>
      28:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_10>
      2c:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <main>
      8a:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <UART_Send_Char>:
	vSet_Pin_Direction(PORT_D,PIN_0,INPUT);
}

void UART_Send_Char(u8 data)
{
	while(!GET_BIT(UCSRA,UDRE));
     d6e:	5d 9b       	sbis	0x0b, 5	; 11
     d70:	fe cf       	rjmp	.-4      	; 0xd6e <UART_Send_Char>
	UDR=data;
     d72:	8c b9       	out	0x0c, r24	; 12


}
     d74:	08 95       	ret

00000d76 <UART_Recive_Char>:
u8 UART_Recive_Char()
{
	while(GET_BIT(UCSRA,RXC)==0);
     d76:	5f 9b       	sbis	0x0b, 7	; 11
     d78:	fe cf       	rjmp	.-4      	; 0xd76 <UART_Recive_Char>
	return UDR;
     d7a:	8c b1       	in	r24, 0x0c	; 12
}
     d7c:	08 95       	ret

00000d7e <UART_INIT>:
void UART_INIT()
{
	// 2D speed
	if(SPEED_MODE==NOT_SET_2DS)
	{
		CLEAR_BIT(UCSRA,U2X);
     d7e:	59 98       	cbi	0x0b, 1	; 11
	{
		SET_BIT(UCSRA,U2X);
	}

	// select buodrate
	UBRRL=BOUD_RATE;
     d80:	87 e6       	ldi	r24, 0x67	; 103
     d82:	89 b9       	out	0x09, r24	; 9
	//SELECT# of bit
	if(SELECT_NUM_BIT==BIT_8)
	{
		SET_BIT(UCSRC_var,UCSZ0);
		SET_BIT(UCSRC_var,UCSZ1);
		CLEAR_BIT(UCSRB,UCSZ2);
     d84:	52 98       	cbi	0x0a, 2	; 10
	}

	//ASENCH
	CLEAR_BIT(UCSRC_var,UMSEL);

	UCSRC=UCSRC_var;
     d86:	86 e0       	ldi	r24, 0x06	; 6
     d88:	80 bd       	out	0x20, r24	; 32




	//enable tx
	SET_BIT(UCSRB,TXEN);
     d8a:	53 9a       	sbi	0x0a, 3	; 10
	vSet_Pin_Direction(PORT_D,PIN_1,OUTPUT);
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	41 e0       	ldi	r20, 0x01	; 1
     d92:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	//enable rx
	SET_BIT(UCSRB,RXEN);
     d96:	54 9a       	sbi	0x0a, 4	; 10
	vSet_Pin_Direction(PORT_D,PIN_0,INPUT);
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
}
     da2:	08 95       	ret

00000da4 <vTIMER0_INIT>:

void vTIMER0_INIT(void) // SELLECT MOOD AND PIE AND SELLECT COMPATR MATCH
{

#if TIMER0_MODE==TIMER0_NORMAL_MODE
	CLEAR_BIT(TCCR0,3);
     da4:	83 b7       	in	r24, 0x33	; 51
     da6:	87 7f       	andi	r24, 0xF7	; 247
     da8:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,6);
     daa:	83 b7       	in	r24, 0x33	; 51
     dac:	8f 7b       	andi	r24, 0xBF	; 191
     dae:	83 bf       	out	0x33, r24	; 51
	// ENABLE PIE OVER FLOW
	SET_BIT(TIMSK,TOIE0);
     db0:	89 b7       	in	r24, 0x39	; 57
     db2:	81 60       	ori	r24, 0x01	; 1
     db4:	89 bf       	out	0x39, r24	; 57

#endif



}
     db6:	08 95       	ret

00000db8 <vTIMER0_START>:


void vTIMER0_START(void)// SELLECT PRESCALER
{
	TCCR0=TCCR0&0b11111000;
     db8:	83 b7       	in	r24, 0x33	; 51
     dba:	88 7f       	andi	r24, 0xF8	; 248
     dbc:	83 bf       	out	0x33, r24	; 51
	TCCR0=TCCR0|TIMER0_PRESCALLER;
     dbe:	83 b7       	in	r24, 0x33	; 51
     dc0:	83 60       	ori	r24, 0x03	; 3
     dc2:	83 bf       	out	0x33, r24	; 51

}
     dc4:	08 95       	ret

00000dc6 <vTIMER0_STOP>:

void vTIMER0_STOP(void)
{
	CLEAR_BIT(TCCR0,CS02);
     dc6:	83 b7       	in	r24, 0x33	; 51
     dc8:	8b 7f       	andi	r24, 0xFB	; 251
     dca:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS01);
     dcc:	83 b7       	in	r24, 0x33	; 51
     dce:	8d 7f       	andi	r24, 0xFD	; 253
     dd0:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS00);
     dd2:	83 b7       	in	r24, 0x33	; 51
     dd4:	8e 7f       	andi	r24, 0xFE	; 254
     dd6:	83 bf       	out	0x33, r24	; 51
}
     dd8:	08 95       	ret

00000dda <vTIMER0_preload>:


void vTIMER0_preload(u8 preload)
{
	if(preload<=255)
		TCNT0=preload;
     dda:	82 bf       	out	0x32, r24	; 50
}
     ddc:	08 95       	ret

00000dde <vTIMER0_Compare_OCR0>:

void vTIMER0_Compare_OCR0(u8 OCR)
{
	if(OCR<=255)
		OCR0=OCR;
     dde:	8c bf       	out	0x3c, r24	; 60
}
     de0:	08 95       	ret

00000de2 <vTIMER0_OF_CallBack>:



void vTIMER0_OF_CallBack(void(*Fptr)(void))
{
	TIMER0_OF_callback=Fptr;
     de2:	90 93 89 01 	sts	0x0189, r25
     de6:	80 93 88 01 	sts	0x0188, r24
}
     dea:	08 95       	ret

00000dec <vTIMER0_OC_CallBack>:

void vTIMER0_OC_CallBack(void(*Fptr)(void))
{

	TIMER0_OC_callback=Fptr;
     dec:	90 93 8b 01 	sts	0x018B, r25
     df0:	80 93 8a 01 	sts	0x018A, r24
}
     df4:	08 95       	ret

00000df6 <__vector_11>:



void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_11 (void){
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	2f 93       	push	r18
     e02:	3f 93       	push	r19
     e04:	4f 93       	push	r20
     e06:	5f 93       	push	r21
     e08:	6f 93       	push	r22
     e0a:	7f 93       	push	r23
     e0c:	8f 93       	push	r24
     e0e:	9f 93       	push	r25
     e10:	af 93       	push	r26
     e12:	bf 93       	push	r27
     e14:	ef 93       	push	r30
     e16:	ff 93       	push	r31

	if(TIMER0_OF_callback!=NULLPTR)
     e18:	e0 91 88 01 	lds	r30, 0x0188
     e1c:	f0 91 89 01 	lds	r31, 0x0189
     e20:	30 97       	sbiw	r30, 0x00	; 0
     e22:	09 f0       	breq	.+2      	; 0xe26 <__vector_11+0x30>
		TIMER0_OF_callback();
     e24:	09 95       	icall

}
     e26:	ff 91       	pop	r31
     e28:	ef 91       	pop	r30
     e2a:	bf 91       	pop	r27
     e2c:	af 91       	pop	r26
     e2e:	9f 91       	pop	r25
     e30:	8f 91       	pop	r24
     e32:	7f 91       	pop	r23
     e34:	6f 91       	pop	r22
     e36:	5f 91       	pop	r21
     e38:	4f 91       	pop	r20
     e3a:	3f 91       	pop	r19
     e3c:	2f 91       	pop	r18
     e3e:	0f 90       	pop	r0
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	0f 90       	pop	r0
     e44:	1f 90       	pop	r1
     e46:	18 95       	reti

00000e48 <__vector_10>:

void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_10 (void){
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31

	if(TIMER0_OC_callback!=NULLPTR)
     e6a:	e0 91 8a 01 	lds	r30, 0x018A
     e6e:	f0 91 8b 01 	lds	r31, 0x018B
     e72:	30 97       	sbiw	r30, 0x00	; 0
     e74:	09 f0       	breq	.+2      	; 0xe78 <__vector_10+0x30>
		TIMER0_OC_callback();
     e76:	09 95       	icall

}
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <vTIMER1_INIT>:
	CLEAR_BIT(TCCR1A,WGM10);
	CLEAR_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	CLEAR_BIT(TCCR1B,WGM13);
#elif  TIMER1_MODE==TIMER1_FASTPWM_ICR_TOP_MODE
	CLEAR_BIT(TCCR1A,WGM10);
     e9a:	8f b5       	in	r24, 0x2f	; 47
     e9c:	8e 7f       	andi	r24, 0xFE	; 254
     e9e:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,WGM11);
     ea0:	8f b5       	in	r24, 0x2f	; 47
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
     ea6:	8e b5       	in	r24, 0x2e	; 46
     ea8:	88 60       	ori	r24, 0x08	; 8
     eaa:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM13);
     eac:	8e b5       	in	r24, 0x2e	; 46
     eae:	80 61       	ori	r24, 0x10	; 16
     eb0:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM12);
	SET_BIT(TCCR1B,WGM13);
#endif


}
     eb2:	08 95       	ret

00000eb4 <Timer1_OCRA1Mode>:


void Timer1_OCRA1Mode(u8 oc1a_mode)
{
	switch (oc1a_mode)
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	51 f0       	breq	.+20     	; 0xecc <Timer1_OCRA1Mode+0x18>
     eb8:	83 30       	cpi	r24, 0x03	; 3
     eba:	79 f0       	breq	.+30     	; 0xeda <Timer1_OCRA1Mode+0x26>
     ebc:	88 23       	and	r24, r24
     ebe:	99 f4       	brne	.+38     	; 0xee6 <Timer1_OCRA1Mode+0x32>
	{
	case OCRA1_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1A0);
     ec0:	8f b5       	in	r24, 0x2f	; 47
     ec2:	8f 7b       	andi	r24, 0xBF	; 191
     ec4:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TCCR1A,COM1A1);
     ec6:	8f b5       	in	r24, 0x2f	; 47
     ec8:	8f 77       	andi	r24, 0x7F	; 127
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <Timer1_OCRA1Mode+0x22>
		break;

	case ORA1_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1A0);
     ecc:	8f b5       	in	r24, 0x2f	; 47
     ece:	8f 7b       	andi	r24, 0xBF	; 191
     ed0:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A,COM1A1);
     ed2:	8f b5       	in	r24, 0x2f	; 47
     ed4:	80 68       	ori	r24, 0x80	; 128
     ed6:	8f bd       	out	0x2f, r24	; 47
     ed8:	08 95       	ret
		break;
	case OCA1_INVERTING:
		SET_BIT(TCCR1A,COM1A0);
     eda:	8f b5       	in	r24, 0x2f	; 47
     edc:	80 64       	ori	r24, 0x40	; 64
     ede:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A,COM1A1);
     ee0:	8f b5       	in	r24, 0x2f	; 47
     ee2:	80 68       	ori	r24, 0x80	; 128
     ee4:	8f bd       	out	0x2f, r24	; 47
     ee6:	08 95       	ret

00000ee8 <Timer1_OCRB1Mode>:
		break;
	}
}
void Timer1_OCRB1Mode(u8 oc1b_mode)
{
	switch (oc1b_mode)
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	51 f0       	breq	.+20     	; 0xf00 <Timer1_OCRB1Mode+0x18>
     eec:	83 30       	cpi	r24, 0x03	; 3
     eee:	79 f0       	breq	.+30     	; 0xf0e <Timer1_OCRB1Mode+0x26>
     ef0:	88 23       	and	r24, r24
     ef2:	99 f4       	brne	.+38     	; 0xf1a <Timer1_OCRB1Mode+0x32>
	{
	case OCRB1_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1B0);
     ef4:	8f b5       	in	r24, 0x2f	; 47
     ef6:	8f 7e       	andi	r24, 0xEF	; 239
     ef8:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TCCR1A,COM1B1);
     efa:	8f b5       	in	r24, 0x2f	; 47
     efc:	8f 7d       	andi	r24, 0xDF	; 223
     efe:	05 c0       	rjmp	.+10     	; 0xf0a <Timer1_OCRB1Mode+0x22>
		break;

	case ORB1_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1B0);
     f00:	8f b5       	in	r24, 0x2f	; 47
     f02:	8f 7e       	andi	r24, 0xEF	; 239
     f04:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A,COM1B1);
     f06:	8f b5       	in	r24, 0x2f	; 47
     f08:	80 62       	ori	r24, 0x20	; 32
     f0a:	8f bd       	out	0x2f, r24	; 47
     f0c:	08 95       	ret
		break;
	case OCB1_INVERTING:
		SET_BIT(TCCR1A,COM1B0);
     f0e:	8f b5       	in	r24, 0x2f	; 47
     f10:	80 61       	ori	r24, 0x10	; 16
     f12:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A,COM1B1);
     f14:	8f b5       	in	r24, 0x2f	; 47
     f16:	80 62       	ori	r24, 0x20	; 32
     f18:	8f bd       	out	0x2f, r24	; 47
     f1a:	08 95       	ret

00000f1c <vTIMER1_START>:
}


void vTIMER1_START(void)
{
	TCCR1B=TCCR1B&0b11111000;
     f1c:	8e b5       	in	r24, 0x2e	; 46
     f1e:	88 7f       	andi	r24, 0xF8	; 248
     f20:	8e bd       	out	0x2e, r24	; 46
	TCCR1B=TCCR1B|TIMER1_PRESCALLER;
     f22:	8e b5       	in	r24, 0x2e	; 46
     f24:	82 60       	ori	r24, 0x02	; 2
     f26:	8e bd       	out	0x2e, r24	; 46
}
     f28:	08 95       	ret

00000f2a <vTIMER1_STOP>:

void vTIMER1_STOP(void)
{
	CLEAR_BIT(TCCR1B,0);
     f2a:	8e b5       	in	r24, 0x2e	; 46
     f2c:	8e 7f       	andi	r24, 0xFE	; 254
     f2e:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B,1);
     f30:	8e b5       	in	r24, 0x2e	; 46
     f32:	8d 7f       	andi	r24, 0xFD	; 253
     f34:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B,2);
     f36:	8e b5       	in	r24, 0x2e	; 46
     f38:	8b 7f       	andi	r24, 0xFB	; 251
     f3a:	8e bd       	out	0x2e, r24	; 46
}
     f3c:	08 95       	ret

00000f3e <vTIMER1_preload>:

void vTIMER1_preload(u8 preload)
{
	TCNT1=preload;
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9d bd       	out	0x2d, r25	; 45
     f42:	8c bd       	out	0x2c, r24	; 44
}
     f44:	08 95       	ret

00000f46 <vTIMER1_Compare_OCR1A>:

void vTIMER1_Compare_OCR1A(u8 OCRA)
{
	OCR1A=OCRA;
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9b bd       	out	0x2b, r25	; 43
     f4a:	8a bd       	out	0x2a, r24	; 42
}
     f4c:	08 95       	ret

00000f4e <vTIMER1_Compare_OCRB1>:
void vTIMER1_Compare_OCRB1(u8 OCRB)
{
	OCR1B=OCRB;
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	99 bd       	out	0x29, r25	; 41
     f52:	88 bd       	out	0x28, r24	; 40
}
     f54:	08 95       	ret

00000f56 <vTIMER1_ICU1>:

void vTIMER1_ICU1(u8 ICU)
{
	ICR1=ICU;
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	97 bd       	out	0x27, r25	; 39
     f5a:	86 bd       	out	0x26, r24	; 38
}
     f5c:	08 95       	ret

00000f5e <Timer1_InputCaptureEdge>:
void Timer1_InputCaptureEdge(u8 ICU_Edge_type_edge)
{
	if(ICU_Edge_type_edge==ICU_Edge_type_RISING)
     f5e:	88 23       	and	r24, r24
     f60:	19 f4       	brne	.+6      	; 0xf68 <Timer1_InputCaptureEdge+0xa>
		SET_BIT(TCCR1B,ICES1);
     f62:	8e b5       	in	r24, 0x2e	; 46
     f64:	80 64       	ori	r24, 0x40	; 64
     f66:	8e bd       	out	0x2e, r24	; 46
     f68:	08 95       	ret

00000f6a <Timer1_ICU_InterruptEnable>:
}


void Timer1_ICU_InterruptEnable(void)
{
	SET_BIT(TIMSK,TICIE1);
     f6a:	89 b7       	in	r24, 0x39	; 57
     f6c:	80 62       	ori	r24, 0x20	; 32
     f6e:	89 bf       	out	0x39, r24	; 57
}
     f70:	08 95       	ret

00000f72 <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
	CLEAR_BIT(TIMSK,TICIE1);
     f72:	89 b7       	in	r24, 0x39	; 57
     f74:	8f 7d       	andi	r24, 0xDF	; 223
     f76:	89 bf       	out	0x39, r24	; 57
}
     f78:	08 95       	ret

00000f7a <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
	SET_BIT(TIMSK,TOIE1);
     f7a:	89 b7       	in	r24, 0x39	; 57
     f7c:	84 60       	ori	r24, 0x04	; 4
     f7e:	89 bf       	out	0x39, r24	; 57
}
     f80:	08 95       	ret

00000f82 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
	CLEAR_BIT(TIMSK,TOIE1);
     f82:	89 b7       	in	r24, 0x39	; 57
     f84:	8b 7f       	andi	r24, 0xFB	; 251
     f86:	89 bf       	out	0x39, r24	; 57
}
     f88:	08 95       	ret

00000f8a <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
	SET_BIT(TIMSK,OCIE1A);
     f8a:	89 b7       	in	r24, 0x39	; 57
     f8c:	80 61       	ori	r24, 0x10	; 16
     f8e:	89 bf       	out	0x39, r24	; 57
}
     f90:	08 95       	ret

00000f92 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
	CLEAR_BIT(TIMSK,OCIE1A);
     f92:	89 b7       	in	r24, 0x39	; 57
     f94:	8f 7e       	andi	r24, 0xEF	; 239
     f96:	89 bf       	out	0x39, r24	; 57
}
     f98:	08 95       	ret

00000f9a <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
	SET_BIT(TIMSK,OCIE1B);
     f9a:	89 b7       	in	r24, 0x39	; 57
     f9c:	88 60       	ori	r24, 0x08	; 8
     f9e:	89 bf       	out	0x39, r24	; 57
}
     fa0:	08 95       	ret

00000fa2 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
	CLEAR_BIT(TIMSK,OCIE1B);
     fa2:	89 b7       	in	r24, 0x39	; 57
     fa4:	87 7f       	andi	r24, 0xF7	; 247
     fa6:	89 bf       	out	0x39, r24	; 57
}
     fa8:	08 95       	ret

00000faa <Timer1_OVF_SetCallBack>:

/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
	Timer1_OVF_Fptr=LocalFptr;
     faa:	90 93 93 01 	sts	0x0193, r25
     fae:	80 93 92 01 	sts	0x0192, r24
}
     fb2:	08 95       	ret

00000fb4 <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
	Timer1_OCA_Fptr=LocalFptr;
     fb4:	90 93 91 01 	sts	0x0191, r25
     fb8:	80 93 90 01 	sts	0x0190, r24
}
     fbc:	08 95       	ret

00000fbe <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
	Timer1_OCB_Fptr=LocalFptr;
     fbe:	90 93 8f 01 	sts	0x018F, r25
     fc2:	80 93 8e 01 	sts	0x018E, r24
}
     fc6:	08 95       	ret

00000fc8 <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
	Timer1_ICU_Fptr=LocalFptr;
     fc8:	90 93 8d 01 	sts	0x018D, r25
     fcc:	80 93 8c 01 	sts	0x018C, r24
}
     fd0:	08 95       	ret

00000fd2 <__vector_9>:


void __vector_9 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_9 (void){
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	11 24       	eor	r1, r1
     fdc:	2f 93       	push	r18
     fde:	3f 93       	push	r19
     fe0:	4f 93       	push	r20
     fe2:	5f 93       	push	r21
     fe4:	6f 93       	push	r22
     fe6:	7f 93       	push	r23
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
     ff0:	ef 93       	push	r30
     ff2:	ff 93       	push	r31

	if(Timer1_OVF_Fptr!=NULLPTR)
     ff4:	e0 91 92 01 	lds	r30, 0x0192
     ff8:	f0 91 93 01 	lds	r31, 0x0193
     ffc:	30 97       	sbiw	r30, 0x00	; 0
     ffe:	09 f0       	breq	.+2      	; 0x1002 <__vector_9+0x30>
		Timer1_OVF_Fptr();
    1000:	09 95       	icall

}
    1002:	ff 91       	pop	r31
    1004:	ef 91       	pop	r30
    1006:	bf 91       	pop	r27
    1008:	af 91       	pop	r26
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	7f 91       	pop	r23
    1010:	6f 91       	pop	r22
    1012:	5f 91       	pop	r21
    1014:	4f 91       	pop	r20
    1016:	3f 91       	pop	r19
    1018:	2f 91       	pop	r18
    101a:	0f 90       	pop	r0
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	0f 90       	pop	r0
    1020:	1f 90       	pop	r1
    1022:	18 95       	reti

00001024 <__vector_7>:

void __vector_7 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_7 (void){
    1024:	1f 92       	push	r1
    1026:	0f 92       	push	r0
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	0f 92       	push	r0
    102c:	11 24       	eor	r1, r1
    102e:	2f 93       	push	r18
    1030:	3f 93       	push	r19
    1032:	4f 93       	push	r20
    1034:	5f 93       	push	r21
    1036:	6f 93       	push	r22
    1038:	7f 93       	push	r23
    103a:	8f 93       	push	r24
    103c:	9f 93       	push	r25
    103e:	af 93       	push	r26
    1040:	bf 93       	push	r27
    1042:	ef 93       	push	r30
    1044:	ff 93       	push	r31

	if(Timer1_OCA_Fptr!=NULLPTR)
    1046:	e0 91 90 01 	lds	r30, 0x0190
    104a:	f0 91 91 01 	lds	r31, 0x0191
    104e:	30 97       	sbiw	r30, 0x00	; 0
    1050:	09 f0       	breq	.+2      	; 0x1054 <__vector_7+0x30>
		Timer1_OCA_Fptr();
    1052:	09 95       	icall

}
    1054:	ff 91       	pop	r31
    1056:	ef 91       	pop	r30
    1058:	bf 91       	pop	r27
    105a:	af 91       	pop	r26
    105c:	9f 91       	pop	r25
    105e:	8f 91       	pop	r24
    1060:	7f 91       	pop	r23
    1062:	6f 91       	pop	r22
    1064:	5f 91       	pop	r21
    1066:	4f 91       	pop	r20
    1068:	3f 91       	pop	r19
    106a:	2f 91       	pop	r18
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <__vector_8>:

void __vector_8 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_8 (void){
    1076:	1f 92       	push	r1
    1078:	0f 92       	push	r0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	0f 92       	push	r0
    107e:	11 24       	eor	r1, r1
    1080:	2f 93       	push	r18
    1082:	3f 93       	push	r19
    1084:	4f 93       	push	r20
    1086:	5f 93       	push	r21
    1088:	6f 93       	push	r22
    108a:	7f 93       	push	r23
    108c:	8f 93       	push	r24
    108e:	9f 93       	push	r25
    1090:	af 93       	push	r26
    1092:	bf 93       	push	r27
    1094:	ef 93       	push	r30
    1096:	ff 93       	push	r31

	if(Timer1_OCB_Fptr!=NULLPTR)
    1098:	e0 91 8e 01 	lds	r30, 0x018E
    109c:	f0 91 8f 01 	lds	r31, 0x018F
    10a0:	30 97       	sbiw	r30, 0x00	; 0
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <__vector_8+0x30>
		Timer1_OCB_Fptr();
    10a4:	09 95       	icall

}
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <__vector_6>:

void __vector_6 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_6 (void){
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31

	if(Timer1_ICU_Fptr!=NULLPTR)
    10ea:	e0 91 8c 01 	lds	r30, 0x018C
    10ee:	f0 91 8d 01 	lds	r31, 0x018D
    10f2:	30 97       	sbiw	r30, 0x00	; 0
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <__vector_6+0x30>
		Timer1_ICU_Fptr();
    10f6:	09 95       	icall

}
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <SPI_INIT>:

void SPI_INIT()
{
	//SELECT LSB MSB
#if WRITE_MODE==LSB
	SET_BIT(SPCR,DORD);
    111a:	6d 9a       	sbi	0x0d, 5	; 13
#elif WRITE_MODE==MSB
	CLEAR_BIT(SPCR,DORD);
#endif
	//SELECT MASTER
#if SPI_MODE==	MASTER
	SET_BIT(SPCR,MSTR);
    111c:	6c 9a       	sbi	0x0d, 4	; 13
	//SELECT CLOCK POLARITY
#if CLOCK_POLATITY_MODE == RAISING
	CLEAR_BIT(SPCR,CPOL);
    111e:	6b 98       	cbi	0x0d, 3	; 13
#elif  CLOCK_POLATITY_MODE == FALLING
	SET_BIT(SPCR,CPOL);
#endif
	//SELECT CLOCK PHASE
#if CLOCK_PHASE_MODE == SAMPLE
	CLEAR_BIT(SPCR,CPHA);
    1120:	6a 98       	cbi	0x0d, 2	; 13
#elif  CLOCK_PHASE_MODE == SETUP
	SET_BIT(SPCR,CPHA);
#endif
	//SELECT D2S
	//SELECT CLOCK
	SET_BIT(SPCR,SPR0);
    1122:	68 9a       	sbi	0x0d, 0	; 13
	CLEAR_BIT(SPCR,SPR1);
    1124:	69 98       	cbi	0x0d, 1	; 13
	CLEAR_BIT(SPSR,SPI2X);
    1126:	70 98       	cbi	0x0e, 0	; 14
	SET_BIT(SPCR,SPR0);
		CLEAR_BIT(SPCR,SPR1);
		CLEAR_BIT(SPSR,SPI2X);
#endif
		//ENABLE SPI
	SET_BIT(SPCR,SPE);
    1128:	6e 9a       	sbi	0x0d, 6	; 13
}
    112a:	08 95       	ret

0000112c <SPI_TRAS_RECIVE>:

 u8 SPI_TRAS_RECIVE( u8 DATA )
{
// WRITE COLLISION
// SPDR= DATA
	SPDR=DATA;
    112c:	8f b9       	out	0x0f, r24	; 15
//BUST WAIT FLAG
	while(GET_BIT(SPSR,SPIF)==0)
    112e:	77 99       	sbic	0x0e, 7	; 14
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <SPI_TRAS_RECIVE+0xa>
//RETURN SPDR
 return SPDR;
    1132:	8f b1       	in	r24, 0x0f	; 15
    1134:	08 95       	ret
}
    1136:	08 95       	ret

00001138 <vGlobal_interrupt_Enable>:



void vGlobal_interrupt_Enable()
{
	SET_BIT(SREG,I);
    1138:	8f b7       	in	r24, 0x3f	; 63
    113a:	80 68       	ori	r24, 0x80	; 128
    113c:	8f bf       	out	0x3f, r24	; 63
}
    113e:	08 95       	ret

00001140 <vGlobal_interrupt_Disable>:
void vGlobal_interrupt_Disable()
{
	CLEAR_BIT(SREG,I);
    1140:	8f b7       	in	r24, 0x3f	; 63
    1142:	8f 77       	andi	r24, 0x7F	; 127
    1144:	8f bf       	out	0x3f, r24	; 63
}
    1146:	08 95       	ret

00001148 <vExternal_Interrupt_Enable>:
#include "External_Interrupt_Praivet.h"


void vExternal_Interrupt_Enable(I_num_t EXTI, I_mood_t EXTI_Mood)
{
	switch(EXTI)
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	51 f1       	breq	.+84     	; 0x11a0 <vExternal_Interrupt_Enable+0x58>
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	20 f0       	brcs	.+8      	; 0x1158 <vExternal_Interrupt_Enable+0x10>
    1150:	82 30       	cpi	r24, 0x02	; 2
    1152:	09 f0       	breq	.+2      	; 0x1156 <vExternal_Interrupt_Enable+0xe>
    1154:	52 c0       	rjmp	.+164    	; 0x11fa <vExternal_Interrupt_Enable+0xb2>
    1156:	43 c0       	rjmp	.+134    	; 0x11de <vExternal_Interrupt_Enable+0x96>
	{
	case EXTI0:
		switch(EXTI_Mood)
    1158:	61 30       	cpi	r22, 0x01	; 1
    115a:	69 f0       	breq	.+26     	; 0x1176 <vExternal_Interrupt_Enable+0x2e>
    115c:	61 30       	cpi	r22, 0x01	; 1
    115e:	28 f0       	brcs	.+10     	; 0x116a <vExternal_Interrupt_Enable+0x22>
    1160:	62 30       	cpi	r22, 0x02	; 2
    1162:	79 f0       	breq	.+30     	; 0x1182 <vExternal_Interrupt_Enable+0x3a>
    1164:	63 30       	cpi	r22, 0x03	; 3
    1166:	c9 f4       	brne	.+50     	; 0x119a <vExternal_Interrupt_Enable+0x52>
    1168:	12 c0       	rjmp	.+36     	; 0x118e <vExternal_Interrupt_Enable+0x46>
		{
		case Raising_edge:
			SET_BIT(MCUCR,ISC00);
    116a:	85 b7       	in	r24, 0x35	; 53
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
    1170:	85 b7       	in	r24, 0x35	; 53
    1172:	82 60       	ori	r24, 0x02	; 2
    1174:	11 c0       	rjmp	.+34     	; 0x1198 <vExternal_Interrupt_Enable+0x50>
			break;
		case Flling_edge:
			SET_BIT(MCUCR,ISC01);
    1176:	85 b7       	in	r24, 0x35	; 53
    1178:	82 60       	ori	r24, 0x02	; 2
    117a:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC00);
    117c:	85 b7       	in	r24, 0x35	; 53
    117e:	8e 7f       	andi	r24, 0xFE	; 254
    1180:	0b c0       	rjmp	.+22     	; 0x1198 <vExternal_Interrupt_Enable+0x50>
			break;
		case Low_level:
			CLEAR_BIT(MCUCR,ISC00);
    1182:	85 b7       	in	r24, 0x35	; 53
    1184:	8e 7f       	andi	r24, 0xFE	; 254
    1186:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
    1188:	85 b7       	in	r24, 0x35	; 53
    118a:	8d 7f       	andi	r24, 0xFD	; 253
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <vExternal_Interrupt_Enable+0x50>
			break;
		case Logical_change:
			CLEAR_BIT(MCUCR,ISC01);
    118e:	85 b7       	in	r24, 0x35	; 53
    1190:	8d 7f       	andi	r24, 0xFD	; 253
    1192:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC00);
    1194:	85 b7       	in	r24, 0x35	; 53
    1196:	81 60       	ori	r24, 0x01	; 1
    1198:	85 bf       	out	0x35, r24	; 53
			break;
		}

		//Enable PIE
		SET_BIT(GICR,INT0);
    119a:	8b b7       	in	r24, 0x3b	; 59
    119c:	80 64       	ori	r24, 0x40	; 64
    119e:	1d c0       	rjmp	.+58     	; 0x11da <vExternal_Interrupt_Enable+0x92>

		break;
		case EXTI1:
			switch(EXTI_Mood)
    11a0:	61 30       	cpi	r22, 0x01	; 1
    11a2:	51 f0       	breq	.+20     	; 0x11b8 <vExternal_Interrupt_Enable+0x70>
    11a4:	61 30       	cpi	r22, 0x01	; 1
    11a6:	28 f0       	brcs	.+10     	; 0x11b2 <vExternal_Interrupt_Enable+0x6a>
    11a8:	62 30       	cpi	r22, 0x02	; 2
    11aa:	49 f0       	breq	.+18     	; 0x11be <vExternal_Interrupt_Enable+0x76>
    11ac:	63 30       	cpi	r22, 0x03	; 3
    11ae:	99 f4       	brne	.+38     	; 0x11d6 <vExternal_Interrupt_Enable+0x8e>
    11b0:	0c c0       	rjmp	.+24     	; 0x11ca <vExternal_Interrupt_Enable+0x82>
			{
			case Raising_edge:
				SET_BIT(MCUCR,ISC11);
    11b2:	85 b7       	in	r24, 0x35	; 53
    11b4:	88 60       	ori	r24, 0x08	; 8
    11b6:	0b c0       	rjmp	.+22     	; 0x11ce <vExternal_Interrupt_Enable+0x86>
				SET_BIT(MCUCR,ISC10);
				break;
			case Flling_edge:
				SET_BIT(MCUCR,ISC11);
    11b8:	85 b7       	in	r24, 0x35	; 53
    11ba:	88 60       	ori	r24, 0x08	; 8
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <vExternal_Interrupt_Enable+0x7a>
				CLEAR_BIT(MCUCR,ISC10);
				break;
			case Low_level:
				CLEAR_BIT(MCUCR,ISC11);
    11be:	85 b7       	in	r24, 0x35	; 53
    11c0:	87 7f       	andi	r24, 0xF7	; 247
    11c2:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(MCUCR,ISC10);
    11c4:	85 b7       	in	r24, 0x35	; 53
    11c6:	8b 7f       	andi	r24, 0xFB	; 251
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <vExternal_Interrupt_Enable+0x8c>
				break;
			case Logical_change:
				CLEAR_BIT(MCUCR,ISC11);
    11ca:	85 b7       	in	r24, 0x35	; 53
    11cc:	87 7f       	andi	r24, 0xF7	; 247
    11ce:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC10);
    11d0:	85 b7       	in	r24, 0x35	; 53
    11d2:	84 60       	ori	r24, 0x04	; 4
    11d4:	85 bf       	out	0x35, r24	; 53
				break;
			}

			//Enable PIE
			SET_BIT(GICR,INT1);
    11d6:	8b b7       	in	r24, 0x3b	; 59
    11d8:	80 68       	ori	r24, 0x80	; 128
    11da:	8b bf       	out	0x3b, r24	; 59
    11dc:	08 95       	ret
			break;
			case EXTI2:
				switch(EXTI_Mood)
    11de:	66 23       	and	r22, r22
    11e0:	19 f0       	breq	.+6      	; 0x11e8 <vExternal_Interrupt_Enable+0xa0>
    11e2:	61 30       	cpi	r22, 0x01	; 1
    11e4:	39 f4       	brne	.+14     	; 0x11f4 <vExternal_Interrupt_Enable+0xac>
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <vExternal_Interrupt_Enable+0xa6>
				{
				case Raising_edge:
					SET_BIT(MCUCSR,ISC2);
    11e8:	84 b7       	in	r24, 0x34	; 52
    11ea:	80 64       	ori	r24, 0x40	; 64
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <vExternal_Interrupt_Enable+0xaa>
					break;
				case Flling_edge:
					CLEAR_BIT(MCUCSR,ISC2);
    11ee:	84 b7       	in	r24, 0x34	; 52
    11f0:	8f 7b       	andi	r24, 0xBF	; 191
    11f2:	84 bf       	out	0x34, r24	; 52
					break;
				}
					SET_BIT(GICR,INT2);
    11f4:	8b b7       	in	r24, 0x3b	; 59
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	8b bf       	out	0x3b, r24	; 59
    11fa:	08 95       	ret

000011fc <vExternal_Interrupt_Disable>:
	}
}
void vExternal_Interrupt_Disable(I_num_t EXTI)
{

}
    11fc:	08 95       	ret

000011fe <vSet_Pin_Direction>:
#include "DIO_CONF.h"


void vSet_Pin_Direction(u8 PORT_ID , u8 PIN_ID , u8 Direction)
{
	switch(Direction)
    11fe:	44 23       	and	r20, r20
    1200:	c9 f1       	breq	.+114    	; 0x1274 <vSet_Pin_Direction+0x76>
    1202:	41 30       	cpi	r20, 0x01	; 1
    1204:	09 f0       	breq	.+2      	; 0x1208 <vSet_Pin_Direction+0xa>
    1206:	6e c0       	rjmp	.+220    	; 0x12e4 <vSet_Pin_Direction+0xe6>
	{
	case OUTPUT:
		switch(PORT_ID)
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	99 f0       	breq	.+38     	; 0x1232 <vSet_Pin_Direction+0x34>
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	30 f0       	brcs	.+12     	; 0x121c <vSet_Pin_Direction+0x1e>
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	d1 f0       	breq	.+52     	; 0x1248 <vSet_Pin_Direction+0x4a>
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	09 f0       	breq	.+2      	; 0x121a <vSet_Pin_Direction+0x1c>
    1218:	65 c0       	rjmp	.+202    	; 0x12e4 <vSet_Pin_Direction+0xe6>
    121a:	21 c0       	rjmp	.+66     	; 0x125e <vSet_Pin_Direction+0x60>
		{
		case PORT_A: SET_BIT(DDRA,PIN_ID); break;
    121c:	2a b3       	in	r18, 0x1a	; 26
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <vSet_Pin_Direction+0x2a>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	6a 95       	dec	r22
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <vSet_Pin_Direction+0x26>
    122c:	28 2b       	or	r18, r24
    122e:	2a bb       	out	0x1a, r18	; 26
    1230:	08 95       	ret
		case PORT_B: SET_BIT(DDRB,PIN_ID); break;
    1232:	27 b3       	in	r18, 0x17	; 23
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 c0       	rjmp	.+4      	; 0x123e <vSet_Pin_Direction+0x40>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	6a 95       	dec	r22
    1240:	e2 f7       	brpl	.-8      	; 0x123a <vSet_Pin_Direction+0x3c>
    1242:	28 2b       	or	r18, r24
    1244:	27 bb       	out	0x17, r18	; 23
    1246:	08 95       	ret
		case PORT_C: SET_BIT(DDRC,PIN_ID); break;
    1248:	24 b3       	in	r18, 0x14	; 20
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <vSet_Pin_Direction+0x56>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	6a 95       	dec	r22
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <vSet_Pin_Direction+0x52>
    1258:	28 2b       	or	r18, r24
    125a:	24 bb       	out	0x14, r18	; 20
    125c:	08 95       	ret
		case PORT_D: SET_BIT(DDRD,PIN_ID); break;
    125e:	21 b3       	in	r18, 0x11	; 17
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <vSet_Pin_Direction+0x6c>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	6a 95       	dec	r22
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <vSet_Pin_Direction+0x68>
    126e:	28 2b       	or	r18, r24
    1270:	21 bb       	out	0x11, r18	; 17
    1272:	08 95       	ret
		}
		break;


		case INPUT:
			switch(PORT_ID)
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	99 f0       	breq	.+38     	; 0x129e <vSet_Pin_Direction+0xa0>
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	28 f0       	brcs	.+10     	; 0x1286 <vSet_Pin_Direction+0x88>
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	d9 f0       	breq	.+54     	; 0x12b6 <vSet_Pin_Direction+0xb8>
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	81 f5       	brne	.+96     	; 0x12e4 <vSet_Pin_Direction+0xe6>
    1284:	24 c0       	rjmp	.+72     	; 0x12ce <vSet_Pin_Direction+0xd0>
			{
			case PORT_A: CLEAR_BIT(DDRA,PIN_ID); break;
    1286:	2a b3       	in	r18, 0x1a	; 26
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <vSet_Pin_Direction+0x94>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	6a 95       	dec	r22
    1294:	e2 f7       	brpl	.-8      	; 0x128e <vSet_Pin_Direction+0x90>
    1296:	80 95       	com	r24
    1298:	82 23       	and	r24, r18
    129a:	8a bb       	out	0x1a, r24	; 26
    129c:	08 95       	ret
			case PORT_B: CLEAR_BIT(DDRB,PIN_ID); break;
    129e:	27 b3       	in	r18, 0x17	; 23
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <vSet_Pin_Direction+0xac>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	6a 95       	dec	r22
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <vSet_Pin_Direction+0xa8>
    12ae:	80 95       	com	r24
    12b0:	82 23       	and	r24, r18
    12b2:	87 bb       	out	0x17, r24	; 23
    12b4:	08 95       	ret
			case PORT_C: CLEAR_BIT(DDRC,PIN_ID); break;
    12b6:	24 b3       	in	r18, 0x14	; 20
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <vSet_Pin_Direction+0xc4>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	6a 95       	dec	r22
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <vSet_Pin_Direction+0xc0>
    12c6:	80 95       	com	r24
    12c8:	82 23       	and	r24, r18
    12ca:	84 bb       	out	0x14, r24	; 20
    12cc:	08 95       	ret
			case PORT_D: CLEAR_BIT(DDRD,PIN_ID); break;
    12ce:	21 b3       	in	r18, 0x11	; 17
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <vSet_Pin_Direction+0xdc>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	6a 95       	dec	r22
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <vSet_Pin_Direction+0xd8>
    12de:	80 95       	com	r24
    12e0:	82 23       	and	r24, r18
    12e2:	81 bb       	out	0x11, r24	; 17
    12e4:	08 95       	ret

000012e6 <vSet_Pin_OUTPUTvalue>:

}

void vSet_Pin_OUTPUTvalue (u8 PORT_ID , u8 PIN_ID , u8 Value)
{
	switch(Value)
    12e6:	44 23       	and	r20, r20
    12e8:	c9 f1       	breq	.+114    	; 0x135c <vSet_Pin_OUTPUTvalue+0x76>
    12ea:	41 30       	cpi	r20, 0x01	; 1
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <vSet_Pin_OUTPUTvalue+0xa>
    12ee:	6e c0       	rjmp	.+220    	; 0x13cc <vSet_Pin_OUTPUTvalue+0xe6>
	{
	case HIGH:
		switch(PORT_ID)
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	99 f0       	breq	.+38     	; 0x131a <vSet_Pin_OUTPUTvalue+0x34>
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	30 f0       	brcs	.+12     	; 0x1304 <vSet_Pin_OUTPUTvalue+0x1e>
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	d1 f0       	breq	.+52     	; 0x1330 <vSet_Pin_OUTPUTvalue+0x4a>
    12fc:	83 30       	cpi	r24, 0x03	; 3
    12fe:	09 f0       	breq	.+2      	; 0x1302 <vSet_Pin_OUTPUTvalue+0x1c>
    1300:	65 c0       	rjmp	.+202    	; 0x13cc <vSet_Pin_OUTPUTvalue+0xe6>
    1302:	21 c0       	rjmp	.+66     	; 0x1346 <vSet_Pin_OUTPUTvalue+0x60>
		{
		case PORT_A: SET_BIT(PORTA,PIN_ID); break;
    1304:	2b b3       	in	r18, 0x1b	; 27
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <vSet_Pin_OUTPUTvalue+0x2a>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	6a 95       	dec	r22
    1312:	e2 f7       	brpl	.-8      	; 0x130c <vSet_Pin_OUTPUTvalue+0x26>
    1314:	28 2b       	or	r18, r24
    1316:	2b bb       	out	0x1b, r18	; 27
    1318:	08 95       	ret
		case PORT_B: SET_BIT(PORTB,PIN_ID); break;
    131a:	28 b3       	in	r18, 0x18	; 24
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <vSet_Pin_OUTPUTvalue+0x40>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	6a 95       	dec	r22
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <vSet_Pin_OUTPUTvalue+0x3c>
    132a:	28 2b       	or	r18, r24
    132c:	28 bb       	out	0x18, r18	; 24
    132e:	08 95       	ret
		case PORT_C: SET_BIT(PORTC,PIN_ID); break;
    1330:	25 b3       	in	r18, 0x15	; 21
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <vSet_Pin_OUTPUTvalue+0x56>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	6a 95       	dec	r22
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <vSet_Pin_OUTPUTvalue+0x52>
    1340:	28 2b       	or	r18, r24
    1342:	25 bb       	out	0x15, r18	; 21
    1344:	08 95       	ret
		case PORT_D: SET_BIT(PORTD,PIN_ID); break;
    1346:	22 b3       	in	r18, 0x12	; 18
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <vSet_Pin_OUTPUTvalue+0x6c>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	6a 95       	dec	r22
    1354:	e2 f7       	brpl	.-8      	; 0x134e <vSet_Pin_OUTPUTvalue+0x68>
    1356:	28 2b       	or	r18, r24
    1358:	22 bb       	out	0x12, r18	; 18
    135a:	08 95       	ret
		}
		break;


		case LOW:
			switch(PORT_ID)
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	99 f0       	breq	.+38     	; 0x1386 <vSet_Pin_OUTPUTvalue+0xa0>
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	28 f0       	brcs	.+10     	; 0x136e <vSet_Pin_OUTPUTvalue+0x88>
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	d9 f0       	breq	.+54     	; 0x139e <vSet_Pin_OUTPUTvalue+0xb8>
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	81 f5       	brne	.+96     	; 0x13cc <vSet_Pin_OUTPUTvalue+0xe6>
    136c:	24 c0       	rjmp	.+72     	; 0x13b6 <vSet_Pin_OUTPUTvalue+0xd0>
			{
			case PORT_A: CLEAR_BIT(PORTA,PIN_ID); break;
    136e:	2b b3       	in	r18, 0x1b	; 27
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 c0       	rjmp	.+4      	; 0x137a <vSet_Pin_OUTPUTvalue+0x94>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	6a 95       	dec	r22
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <vSet_Pin_OUTPUTvalue+0x90>
    137e:	80 95       	com	r24
    1380:	82 23       	and	r24, r18
    1382:	8b bb       	out	0x1b, r24	; 27
    1384:	08 95       	ret
			case PORT_B: CLEAR_BIT(PORTB,PIN_ID); break;
    1386:	28 b3       	in	r18, 0x18	; 24
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <vSet_Pin_OUTPUTvalue+0xac>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	6a 95       	dec	r22
    1394:	e2 f7       	brpl	.-8      	; 0x138e <vSet_Pin_OUTPUTvalue+0xa8>
    1396:	80 95       	com	r24
    1398:	82 23       	and	r24, r18
    139a:	88 bb       	out	0x18, r24	; 24
    139c:	08 95       	ret
			case PORT_C: CLEAR_BIT(PORTC,PIN_ID); break;
    139e:	25 b3       	in	r18, 0x15	; 21
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <vSet_Pin_OUTPUTvalue+0xc4>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	6a 95       	dec	r22
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <vSet_Pin_OUTPUTvalue+0xc0>
    13ae:	80 95       	com	r24
    13b0:	82 23       	and	r24, r18
    13b2:	85 bb       	out	0x15, r24	; 21
    13b4:	08 95       	ret
			case PORT_D: CLEAR_BIT(PORTD,PIN_ID); break;
    13b6:	22 b3       	in	r18, 0x12	; 18
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <vSet_Pin_OUTPUTvalue+0xdc>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	6a 95       	dec	r22
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <vSet_Pin_OUTPUTvalue+0xd8>
    13c6:	80 95       	com	r24
    13c8:	82 23       	and	r24, r18
    13ca:	82 bb       	out	0x12, r24	; 18
    13cc:	08 95       	ret

000013ce <vTOGGLE_Pin>:

}

void vTOGGLE_Pin          (u8 PORT_ID , u8 PIN_ID)
{
	switch(PORT_ID)
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	91 f0       	breq	.+36     	; 0x13f6 <vTOGGLE_Pin+0x28>
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	28 f0       	brcs	.+10     	; 0x13e0 <vTOGGLE_Pin+0x12>
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	c9 f0       	breq	.+50     	; 0x140c <vTOGGLE_Pin+0x3e>
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	61 f5       	brne	.+88     	; 0x1436 <vTOGGLE_Pin+0x68>
    13de:	21 c0       	rjmp	.+66     	; 0x1422 <vTOGGLE_Pin+0x54>
	{
	case PORT_A : TOG_BIT(PORTA,PIN_ID);break;
    13e0:	2b b3       	in	r18, 0x1b	; 27
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <vTOGGLE_Pin+0x1e>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	6a 95       	dec	r22
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <vTOGGLE_Pin+0x1a>
    13f0:	28 27       	eor	r18, r24
    13f2:	2b bb       	out	0x1b, r18	; 27
    13f4:	08 95       	ret
	case PORT_B : TOG_BIT(PORTB,PIN_ID);break;
    13f6:	28 b3       	in	r18, 0x18	; 24
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <vTOGGLE_Pin+0x34>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	6a 95       	dec	r22
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <vTOGGLE_Pin+0x30>
    1406:	28 27       	eor	r18, r24
    1408:	28 bb       	out	0x18, r18	; 24
    140a:	08 95       	ret
	case PORT_C : TOG_BIT(PORTC,PIN_ID);break;
    140c:	25 b3       	in	r18, 0x15	; 21
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <vTOGGLE_Pin+0x4a>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	6a 95       	dec	r22
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <vTOGGLE_Pin+0x46>
    141c:	28 27       	eor	r18, r24
    141e:	25 bb       	out	0x15, r18	; 21
    1420:	08 95       	ret
	case PORT_D : TOG_BIT(PORTD,PIN_ID);break;
    1422:	22 b3       	in	r18, 0x12	; 18
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 c0       	rjmp	.+4      	; 0x142e <vTOGGLE_Pin+0x60>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	6a 95       	dec	r22
    1430:	e2 f7       	brpl	.-8      	; 0x142a <vTOGGLE_Pin+0x5c>
    1432:	28 27       	eor	r18, r24
    1434:	22 bb       	out	0x12, r18	; 18
    1436:	08 95       	ret

00001438 <vSet_Port_Direction>:
}


void vSet_Port_Direction   (u8 PORT_ID , u8 Direction)
{
	switch(Direction)
    1438:	66 23       	and	r22, r22
    143a:	b9 f0       	breq	.+46     	; 0x146a <vSet_Port_Direction+0x32>
    143c:	61 30       	cpi	r22, 0x01	; 1
    143e:	29 f5       	brne	.+74     	; 0x148a <vSet_Port_Direction+0x52>
	{
	case OUTPUT:
		switch(PORT_ID)
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	51 f0       	breq	.+20     	; 0x1458 <vSet_Port_Direction+0x20>
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	28 f0       	brcs	.+10     	; 0x1452 <vSet_Port_Direction+0x1a>
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	49 f0       	breq	.+18     	; 0x145e <vSet_Port_Direction+0x26>
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	e9 f4       	brne	.+58     	; 0x148a <vSet_Port_Direction+0x52>
    1450:	09 c0       	rjmp	.+18     	; 0x1464 <vSet_Port_Direction+0x2c>
		{
		case PORT_A: DDRA=0xff; break;
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	8a bb       	out	0x1a, r24	; 26
    1456:	08 95       	ret
		case PORT_B: DDRB=0xff; break;
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	87 bb       	out	0x17, r24	; 23
    145c:	08 95       	ret
		case PORT_C: DDRC=0xff; break;
    145e:	8f ef       	ldi	r24, 0xFF	; 255
    1460:	84 bb       	out	0x14, r24	; 20
    1462:	08 95       	ret
		case PORT_D:DDRD=0xff; break;
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	81 bb       	out	0x11, r24	; 17
    1468:	08 95       	ret
		}
		break;


		case INPUT:
			switch(PORT_ID)
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	49 f0       	breq	.+18     	; 0x1480 <vSet_Port_Direction+0x48>
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	28 f0       	brcs	.+10     	; 0x147c <vSet_Port_Direction+0x44>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	39 f0       	breq	.+14     	; 0x1484 <vSet_Port_Direction+0x4c>
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	41 f4       	brne	.+16     	; 0x148a <vSet_Port_Direction+0x52>
    147a:	06 c0       	rjmp	.+12     	; 0x1488 <vSet_Port_Direction+0x50>
			{
			case PORT_A: DDRA=0x00; break;
    147c:	1a ba       	out	0x1a, r1	; 26
    147e:	08 95       	ret
			case PORT_B: DDRB=0x00; break;
    1480:	17 ba       	out	0x17, r1	; 23
    1482:	08 95       	ret
			case PORT_C: DDRC=0x00; break;
    1484:	14 ba       	out	0x14, r1	; 20
    1486:	08 95       	ret
			case PORT_D:DDRD=0x00; break;
    1488:	11 ba       	out	0x11, r1	; 17
    148a:	08 95       	ret

0000148c <vSet_Port_OUTPUTvalue>:

void vSet_Port_OUTPUTvalue (u8 PORT_ID , u8 Value)
{


		switch(PORT_ID)
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	49 f0       	breq	.+18     	; 0x14a2 <vSet_Port_OUTPUTvalue+0x16>
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	28 f0       	brcs	.+10     	; 0x149e <vSet_Port_OUTPUTvalue+0x12>
    1494:	82 30       	cpi	r24, 0x02	; 2
    1496:	39 f0       	breq	.+14     	; 0x14a6 <vSet_Port_OUTPUTvalue+0x1a>
    1498:	83 30       	cpi	r24, 0x03	; 3
    149a:	41 f4       	brne	.+16     	; 0x14ac <vSet_Port_OUTPUTvalue+0x20>
    149c:	06 c0       	rjmp	.+12     	; 0x14aa <vSet_Port_OUTPUTvalue+0x1e>
		{
		case PORT_A: PORTA=Value; break;
    149e:	6b bb       	out	0x1b, r22	; 27
    14a0:	08 95       	ret
		case PORT_B: PORTB=Value; break;
    14a2:	68 bb       	out	0x18, r22	; 24
    14a4:	08 95       	ret
		case PORT_C: PORTC=Value; break;
    14a6:	65 bb       	out	0x15, r22	; 21
    14a8:	08 95       	ret
		case PORT_D: PORTD=Value; break;
    14aa:	62 bb       	out	0x12, r22	; 18
    14ac:	08 95       	ret

000014ae <vGIT_PIN>:
	}

u8 vGIT_PIN (u8 PORT_ID , u8 PIN_ID)
{
	u8 BIT=0;
	switch(PORT_ID)
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	51 f0       	breq	.+20     	; 0x14c6 <vGIT_PIN+0x18>
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	30 f0       	brcs	.+12     	; 0x14c2 <vGIT_PIN+0x14>
    14b6:	82 30       	cpi	r24, 0x02	; 2
    14b8:	41 f0       	breq	.+16     	; 0x14ca <vGIT_PIN+0x1c>
    14ba:	83 30       	cpi	r24, 0x03	; 3
    14bc:	79 f0       	breq	.+30     	; 0x14dc <vGIT_PIN+0x2e>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	08 95       	ret
			{
			case PORT_A: BIT=GET_BIT(PINA,PIN_ID); break;
    14c2:	89 b3       	in	r24, 0x19	; 25
    14c4:	03 c0       	rjmp	.+6      	; 0x14cc <vGIT_PIN+0x1e>
			case PORT_B: BIT=GET_BIT(PINB,PIN_ID); break;
    14c6:	86 b3       	in	r24, 0x16	; 22
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <vGIT_PIN+0x1e>
			case PORT_C: BIT=GET_BIT(PINC,PIN_ID); break;
    14ca:	83 b3       	in	r24, 0x13	; 19
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <vGIT_PIN+0x26>
    14d0:	95 95       	asr	r25
    14d2:	87 95       	ror	r24
    14d4:	6a 95       	dec	r22
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <vGIT_PIN+0x22>
    14d8:	81 70       	andi	r24, 0x01	; 1
    14da:	08 95       	ret
			case PORT_D: BIT=GET_BIT(PIND,PIN_ID); break;
    14dc:	80 b3       	in	r24, 0x10	; 16
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <vGIT_PIN+0x38>
    14e2:	95 95       	asr	r25
    14e4:	87 95       	ror	r24
    14e6:	6a 95       	dec	r22
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <vGIT_PIN+0x34>
    14ea:	81 70       	andi	r24, 0x01	; 1

			}
	return BIT;
}
    14ec:	08 95       	ret

000014ee <ADC_Init>:
#include "ADC_praivate.h"


void ADC_Init (u8 volt_ref,u8 prescaller)// ADC Initialization And Enable
{
	switch(volt_ref)
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	41 f0       	breq	.+16     	; 0x1502 <ADC_Init+0x14>
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	18 f0       	brcs	.+6      	; 0x14fc <ADC_Init+0xe>
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	41 f4       	brne	.+16     	; 0x150a <ADC_Init+0x1c>
    14fa:	05 c0       	rjmp	.+10     	; 0x1506 <ADC_Init+0x18>
	{
	case EREF:
		CLEAR_BIT(ADMUX,REFS0);
    14fc:	3e 98       	cbi	0x07, 6	; 7
		CLEAR_BIT(ADMUX,REFS1);
    14fe:	3f 98       	cbi	0x07, 7	; 7
    1500:	04 c0       	rjmp	.+8      	; 0x150a <ADC_Init+0x1c>
		break;
	case AVCC:
		CLEAR_BIT(ADMUX,REFS1);
    1502:	3f 98       	cbi	0x07, 7	; 7
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <ADC_Init+0x1a>
		SET_BIT(ADMUX,REFS0);
		break;
	case internal:
		SET_BIT(ADMUX,REFS1);
    1506:	3f 9a       	sbi	0x07, 7	; 7
		SET_BIT(ADMUX,REFS0);
    1508:	3e 9a       	sbi	0x07, 6	; 7
		break;

	}
	CLEAR_BIT(ADMUX,ADLAR);
    150a:	3d 98       	cbi	0x07, 5	; 7
	SET_BIT(ADCSRA,ADEN);
    150c:	37 9a       	sbi	0x06, 7	; 6
	switch(prescaller)
    150e:	62 30       	cpi	r22, 0x02	; 2
    1510:	99 f0       	breq	.+38     	; 0x1538 <ADC_Init+0x4a>
    1512:	63 30       	cpi	r22, 0x03	; 3
    1514:	28 f4       	brcc	.+10     	; 0x1520 <ADC_Init+0x32>
    1516:	66 23       	and	r22, r22
    1518:	51 f0       	breq	.+20     	; 0x152e <ADC_Init+0x40>
    151a:	61 30       	cpi	r22, 0x01	; 1
    151c:	d9 f4       	brne	.+54     	; 0x1554 <ADC_Init+0x66>
    151e:	0a c0       	rjmp	.+20     	; 0x1534 <ADC_Init+0x46>
    1520:	64 30       	cpi	r22, 0x04	; 4
    1522:	89 f0       	breq	.+34     	; 0x1546 <ADC_Init+0x58>
    1524:	64 30       	cpi	r22, 0x04	; 4
    1526:	60 f0       	brcs	.+24     	; 0x1540 <ADC_Init+0x52>
    1528:	65 30       	cpi	r22, 0x05	; 5
    152a:	a1 f4       	brne	.+40     	; 0x1554 <ADC_Init+0x66>
    152c:	10 c0       	rjmp	.+32     	; 0x154e <ADC_Init+0x60>
	{
	case prescaller2:
		CLEAR_BIT(ADCSRA,ADPS0);
    152e:	30 98       	cbi	0x06, 0	; 6
		CLEAR_BIT(ADCSRA,ADPS1);
    1530:	31 98       	cbi	0x06, 1	; 6
    1532:	04 c0       	rjmp	.+8      	; 0x153c <ADC_Init+0x4e>
		CLEAR_BIT(ADCSRA,ADPS2);
		break;
	case prescaller4:
		CLEAR_BIT(ADCSRA,ADPS0);
    1534:	30 98       	cbi	0x06, 0	; 6
    1536:	01 c0       	rjmp	.+2      	; 0x153a <ADC_Init+0x4c>
		SET_BIT(ADCSRA,ADPS1);
		CLEAR_BIT(ADCSRA,ADPS2);
		break;
	case prescaller8:
		SET_BIT(ADCSRA,ADPS0);
    1538:	30 9a       	sbi	0x06, 0	; 6
		SET_BIT(ADCSRA,ADPS1);
    153a:	31 9a       	sbi	0x06, 1	; 6
		CLEAR_BIT(ADCSRA,ADPS2);
    153c:	32 98       	cbi	0x06, 2	; 6
    153e:	08 95       	ret
		break;
	case prescaller16:
		CLEAR_BIT(ADCSRA,ADPS0);
    1540:	30 98       	cbi	0x06, 0	; 6
		CLEAR_BIT(ADCSRA,ADPS1);
    1542:	31 98       	cbi	0x06, 1	; 6
    1544:	02 c0       	rjmp	.+4      	; 0x154a <ADC_Init+0x5c>
		SET_BIT(ADCSRA,ADPS2);
		break;
	case prescaller32:
		CLEAR_BIT(ADCSRA,ADPS0);
    1546:	30 98       	cbi	0x06, 0	; 6
		SET_BIT(ADCSRA,ADPS1);
    1548:	31 9a       	sbi	0x06, 1	; 6
		SET_BIT(ADCSRA,ADPS2);
    154a:	32 9a       	sbi	0x06, 2	; 6
    154c:	08 95       	ret
		break;
	case prescaller128:
		SET_BIT(ADCSRA,ADPS0);
    154e:	30 9a       	sbi	0x06, 0	; 6
		SET_BIT(ADCSRA,ADPS1);
    1550:	31 9a       	sbi	0x06, 1	; 6
		SET_BIT(ADCSRA,ADPS2);
    1552:	32 9a       	sbi	0x06, 2	; 6
    1554:	08 95       	ret

00001556 <ADC_Read>:



u16 ADC_Read (u8 Channel)// Read From The ADC Channel
{
  ADMUX=ADMUX&0b11100000;
    1556:	97 b1       	in	r25, 0x07	; 7
    1558:	90 7e       	andi	r25, 0xE0	; 224
    155a:	97 b9       	out	0x07, r25	; 7
  ADMUX=ADMUX|Channel;
    155c:	97 b1       	in	r25, 0x07	; 7
    155e:	98 2b       	or	r25, r24
    1560:	97 b9       	out	0x07, r25	; 7
  // START CONVERTION
  SET_BIT(ADCSRA,ADSC);
    1562:	36 9a       	sbi	0x06, 6	; 6

  //CHEAK FLAG
  while(!GET_BIT(ADCSRA,ADIF));
    1564:	34 9b       	sbis	0x06, 4	; 6
    1566:	fe cf       	rjmp	.-4      	; 0x1564 <ADC_Read+0xe>

  //CLEAR FLAG BY SET BIT
  SET_BIT(ADCSRA,ADIF);
    1568:	34 9a       	sbi	0x06, 4	; 6

  return ADC_Reg;
    156a:	24 b1       	in	r18, 0x04	; 4
    156c:	35 b1       	in	r19, 0x05	; 5


}
    156e:	c9 01       	movw	r24, r18
    1570:	08 95       	ret

00001572 <ADC_VOLT>:
f32  ADC_VOLT(u8  channel)
{
	f32  volt , adc;

	adc = ADC_Read(channel);
    1572:	0e 94 ab 0a 	call	0x1556	; 0x1556 <ADC_Read>
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 ea       	ldi	r20, 0xA0	; 160
    1588:	50 e4       	ldi	r21, 0x40	; 64
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 ec       	ldi	r19, 0xC0	; 192
    1592:	4f e7       	ldi	r20, 0x7F	; 127
    1594:	54 e4       	ldi	r21, 0x44	; 68
    1596:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	4a e7       	ldi	r20, 0x7A	; 122
    15a0:	54 e4       	ldi	r21, 0x44	; 68
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>

	volt=((adc*5)/1023)*1000;
	return volt;

}
    15a6:	08 95       	ret

000015a8 <convert_volt_to_temp>:

u16  convert_volt_to_temp(u8 channel)
{
	u16 temp;
	temp=ADC_VOLT(channel)*100;
    15a8:	0e 94 b9 0a 	call	0x1572	; 0x1572 <ADC_VOLT>
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	48 ec       	ldi	r20, 0xC8	; 200
    15b2:	52 e4       	ldi	r21, 0x42	; 66
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
	return temp;
}
    15bc:	cb 01       	movw	r24, r22
    15be:	08 95       	ret

000015c0 <speed_control>:
	}
}
void speed_control (u8 motorID,u8 Direction , u8 duty_cycle)
{
    // you complet this code
}
    15c0:	08 95       	ret

000015c2 <STop_motor>:
	}
}
void STop_motor(u8 motorID)
{

	switch(motorID)
    15c2:	88 23       	and	r24, r24
    15c4:	19 f0       	breq	.+6      	; 0x15cc <STop_motor+0xa>
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	f1 f5       	brne	.+124    	; 0x1646 <STop_motor+0x84>
    15ca:	1f c0       	rjmp	.+62     	; 0x160a <STop_motor+0x48>
	{
	case MOTOR_A:

		/****************************PIN DIRECTION***************/
		vSet_Pin_Direction(MOTOR_A_PORT_NEGATIVE,MOTOR_A_PIN_NEGATIVE,OUTPUT);
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	62 e0       	ldi	r22, 0x02	; 2
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
		vSet_Pin_Direction(MOTOR_A_PORT_PSTIVE,MOTOR_A_PIN_PSTIVE,OUTPUT);
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	61 e0       	ldi	r22, 0x01	; 1
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
		vSet_Pin_Direction(MOTOR_A_PORT_ENABLE,MOTOR_A_PIN_ENABLE,OUTPUT);
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	63 e0       	ldi	r22, 0x03	; 3
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
		/****************************PIN VALUE***************/
		vSet_Pin_OUTPUTvalue(MOTOR_A_PORT_NEGATIVE,MOTOR_A_PIN_NEGATIVE,LOW);
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	62 e0       	ldi	r22, 0x02	; 2
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
		vSet_Pin_OUTPUTvalue(MOTOR_A_PORT_PSTIVE,MOTOR_A_PIN_PSTIVE,LOW);
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
		vSet_Pin_OUTPUTvalue(MOTOR_A_PORT_ENABLE,MOTOR_A_PIN_ENABLE,LOW);
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	63 e0       	ldi	r22, 0x03	; 3
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1608:	08 95       	ret

		break;
	case MOTOR_B:

		/****************************PIN DIRECTION***************/
		vSet_Pin_Direction(MOTOR_B_PORT_NEGATIVE,MOTOR_B_PIN_NEGATIVE,OUTPUT);
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	65 e0       	ldi	r22, 0x05	; 5
    160e:	41 e0       	ldi	r20, 0x01	; 1
    1610:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
		vSet_Pin_Direction(MOTOR_B_PORT_PSTIVE,MOTOR_B_PIN_PSTIVE,OUTPUT);
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	64 e0       	ldi	r22, 0x04	; 4
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
		vSet_Pin_Direction(MOTOR_B_PORT_ENABLE,MOTOR_B_PIN_ENABLE,OUTPUT);
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	66 e0       	ldi	r22, 0x06	; 6
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
		/****************************PIN VALUE***************/
		vSet_Pin_OUTPUTvalue(MOTOR_B_PORT_NEGATIVE,MOTOR_B_PIN_NEGATIVE,LOW);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	65 e0       	ldi	r22, 0x05	; 5
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
		vSet_Pin_OUTPUTvalue(MOTOR_B_PORT_PSTIVE,MOTOR_B_PIN_PSTIVE,LOW);
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	64 e0       	ldi	r22, 0x04	; 4
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
		vSet_Pin_OUTPUTvalue(MOTOR_B_PORT_ENABLE,MOTOR_B_PIN_ENABLE,LOW);
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	66 e0       	ldi	r22, 0x06	; 6
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1646:	08 95       	ret

00001648 <Start_motor>:
#include "MOTOR_CONF.h"
#include "MOTOR_init.h"

void Start_motor(u8 motorID, u8 Direction)
{
	switch(motorID)
    1648:	88 23       	and	r24, r24
    164a:	21 f0       	breq	.+8      	; 0x1654 <Start_motor+0xc>
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	09 f0       	breq	.+2      	; 0x1652 <Start_motor+0xa>
    1650:	7b c0       	rjmp	.+246    	; 0x1748 <Start_motor+0x100>
    1652:	39 c0       	rjmp	.+114    	; 0x16c6 <Start_motor+0x7e>
	{
	case MOTOR_A:
		if(Direction==DIRECTION_CW)
    1654:	66 23       	and	r22, r22
    1656:	c1 f4       	brne	.+48     	; 0x1688 <Start_motor+0x40>
		{
			/****************************PIN DIRECTION***************/
			vSet_Pin_Direction(MOTOR_A_PORT_NEGATIVE,MOTOR_A_PIN_NEGATIVE,OUTPUT);
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	62 e0       	ldi	r22, 0x02	; 2
    165c:	41 e0       	ldi	r20, 0x01	; 1
    165e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			vSet_Pin_Direction(MOTOR_A_PORT_PSTIVE,MOTOR_A_PIN_PSTIVE,OUTPUT);
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			vSet_Pin_Direction(MOTOR_A_PORT_ENABLE,MOTOR_A_PIN_ENABLE,OUTPUT);
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	63 e0       	ldi	r22, 0x03	; 3
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			/****************************PIN VALUE***************/
			vSet_Pin_OUTPUTvalue(MOTOR_A_PORT_NEGATIVE,MOTOR_A_PIN_NEGATIVE,LOW);
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
			vSet_Pin_OUTPUTvalue(MOTOR_A_PORT_PSTIVE,MOTOR_A_PIN_PSTIVE,HIGH);
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	41 e0       	ldi	r20, 0x01	; 1
    1686:	1a c0       	rjmp	.+52     	; 0x16bc <Start_motor+0x74>
			vSet_Pin_OUTPUTvalue(MOTOR_A_PORT_ENABLE,MOTOR_A_PIN_ENABLE,HIGH);

		}
		else if (Direction==DIRECTION_CCW)
    1688:	61 30       	cpi	r22, 0x01	; 1
    168a:	09 f0       	breq	.+2      	; 0x168e <Start_motor+0x46>
    168c:	5d c0       	rjmp	.+186    	; 0x1748 <Start_motor+0x100>
		{
			/****************************PIN DIRECTION***************/
			vSet_Pin_Direction(MOTOR_A_PORT_NEGATIVE,MOTOR_A_PIN_NEGATIVE,OUTPUT);
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	62 e0       	ldi	r22, 0x02	; 2
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			vSet_Pin_Direction(MOTOR_A_PORT_PSTIVE,MOTOR_A_PIN_PSTIVE,OUTPUT);
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			vSet_Pin_Direction(MOTOR_A_PORT_ENABLE,MOTOR_A_PIN_ENABLE,OUTPUT);
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	63 e0       	ldi	r22, 0x03	; 3
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			/****************************PIN VALUE***************/
			vSet_Pin_OUTPUTvalue(MOTOR_A_PORT_NEGATIVE,MOTOR_A_PIN_NEGATIVE,HIGH);
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	62 e0       	ldi	r22, 0x02	; 2
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
			vSet_Pin_OUTPUTvalue(MOTOR_A_PORT_PSTIVE,MOTOR_A_PIN_PSTIVE,LOW);
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
			vSet_Pin_OUTPUTvalue(MOTOR_A_PORT_ENABLE,MOTOR_A_PIN_ENABLE,HIGH);
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	63 e0       	ldi	r22, 0x03	; 3
    16c4:	1d c0       	rjmp	.+58     	; 0x1700 <Start_motor+0xb8>

		}
		break;
	case MOTOR_B:
		if(Direction==DIRECTION_CW)
    16c6:	66 23       	and	r22, r22
    16c8:	f9 f4       	brne	.+62     	; 0x1708 <Start_motor+0xc0>
		{
			/****************************PIN DIRECTION***************/
			vSet_Pin_Direction(MOTOR_B_PORT_NEGATIVE,MOTOR_B_PIN_NEGATIVE,OUTPUT);
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	65 e0       	ldi	r22, 0x05	; 5
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			vSet_Pin_Direction(MOTOR_B_PORT_PSTIVE,MOTOR_B_PIN_PSTIVE,OUTPUT);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	64 e0       	ldi	r22, 0x04	; 4
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			vSet_Pin_Direction(MOTOR_B_PORT_ENABLE,MOTOR_B_PIN_ENABLE,OUTPUT);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	66 e0       	ldi	r22, 0x06	; 6
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			/****************************PIN VALUE***************/
			vSet_Pin_OUTPUTvalue(MOTOR_B_PORT_NEGATIVE,MOTOR_B_PIN_NEGATIVE,LOW);
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	65 e0       	ldi	r22, 0x05	; 5
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
			vSet_Pin_OUTPUTvalue(MOTOR_B_PORT_PSTIVE,MOTOR_B_PIN_PSTIVE,HIGH);
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	64 e0       	ldi	r22, 0x04	; 4
    16f6:	41 e0       	ldi	r20, 0x01	; 1
    16f8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
			vSet_Pin_OUTPUTvalue(MOTOR_B_PORT_ENABLE,MOTOR_B_PIN_ENABLE,HIGH);
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	66 e0       	ldi	r22, 0x06	; 6
    1700:	41 e0       	ldi	r20, 0x01	; 1
    1702:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1706:	08 95       	ret

		}
		else if (Direction==DIRECTION_CCW)
    1708:	61 30       	cpi	r22, 0x01	; 1
    170a:	f1 f4       	brne	.+60     	; 0x1748 <Start_motor+0x100>
		{
			/****************************PIN DIRECTION***************/
			vSet_Pin_Direction(MOTOR_B_PORT_NEGATIVE,MOTOR_B_PIN_NEGATIVE,OUTPUT);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	65 e0       	ldi	r22, 0x05	; 5
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			vSet_Pin_Direction(MOTOR_B_PORT_PSTIVE,MOTOR_B_PIN_PSTIVE,OUTPUT);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	64 e0       	ldi	r22, 0x04	; 4
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			vSet_Pin_Direction(MOTOR_B_PORT_ENABLE,MOTOR_B_PIN_ENABLE,OUTPUT);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	66 e0       	ldi	r22, 0x06	; 6
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
			/****************************PIN VALUE***************/
			vSet_Pin_OUTPUTvalue(MOTOR_B_PORT_NEGATIVE,MOTOR_B_PIN_NEGATIVE,HIGH);
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	65 e0       	ldi	r22, 0x05	; 5
    172e:	41 e0       	ldi	r20, 0x01	; 1
    1730:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
			vSet_Pin_OUTPUTvalue(MOTOR_B_PORT_PSTIVE,MOTOR_B_PIN_PSTIVE,LOW);
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	64 e0       	ldi	r22, 0x04	; 4
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
			vSet_Pin_OUTPUTvalue(MOTOR_B_PORT_ENABLE,MOTOR_B_PIN_ENABLE,HIGH);
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	66 e0       	ldi	r22, 0x06	; 6
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1748:	08 95       	ret

0000174a <vLCD_sendDATA>:
	_delay_ms(1);
	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,LOW);
	_delay_ms(1);
}
void vLCD_sendDATA(u8 data)
{
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	1f 93       	push	r17
    1750:	18 2f       	mov	r17, r24
	vSet_Pin_OUTPUTvalue(RS_PORT,RS_PIN,HIGH);
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(R_W_PORT,R_W_PIN,LOW);
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	62 e0       	ldi	r22, 0x02	; 2
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>


	vSet_Pin_OUTPUTvalue(DATA_PORT,D7,GET_BIT(data,7));
    1766:	41 2f       	mov	r20, r17
    1768:	44 1f       	adc	r20, r20
    176a:	44 27       	eor	r20, r20
    176c:	44 1f       	adc	r20, r20
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	67 e0       	ldi	r22, 0x07	; 7
    1772:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D6,GET_BIT(data,6));
    1776:	41 2f       	mov	r20, r17
    1778:	42 95       	swap	r20
    177a:	46 95       	lsr	r20
    177c:	46 95       	lsr	r20
    177e:	41 70       	andi	r20, 0x01	; 1
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	66 e0       	ldi	r22, 0x06	; 6
    1784:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D5,GET_BIT(data,5));
    1788:	41 2f       	mov	r20, r17
    178a:	42 95       	swap	r20
    178c:	46 95       	lsr	r20
    178e:	41 70       	andi	r20, 0x01	; 1
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	65 e0       	ldi	r22, 0x05	; 5
    1794:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D4,GET_BIT(data,4));
    1798:	41 2f       	mov	r20, r17
    179a:	42 95       	swap	r20
    179c:	41 70       	andi	r20, 0x01	; 1
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	64 e0       	ldi	r22, 0x04	; 4
    17a2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,HIGH);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	63 e0       	ldi	r22, 0x03	; 3
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17b0:	80 ea       	ldi	r24, 0xA0	; 160
    17b2:	e8 2e       	mov	r14, r24
    17b4:	8f e0       	ldi	r24, 0x0F	; 15
    17b6:	f8 2e       	mov	r15, r24
    17b8:	c7 01       	movw	r24, r14
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <vLCD_sendDATA+0x70>
	_delay_ms(1);
	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,LOW);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	63 e0       	ldi	r22, 0x03	; 3
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    17c8:	c7 01       	movw	r24, r14
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <vLCD_sendDATA+0x80>
	_delay_ms(1);
	vSet_Pin_OUTPUTvalue(DATA_PORT,D7,GET_BIT(data,3));
    17ce:	41 2f       	mov	r20, r17
    17d0:	46 95       	lsr	r20
    17d2:	46 95       	lsr	r20
    17d4:	46 95       	lsr	r20
    17d6:	41 70       	andi	r20, 0x01	; 1
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	67 e0       	ldi	r22, 0x07	; 7
    17dc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D6,GET_BIT(data,2));
    17e0:	41 2f       	mov	r20, r17
    17e2:	46 95       	lsr	r20
    17e4:	46 95       	lsr	r20
    17e6:	41 70       	andi	r20, 0x01	; 1
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	66 e0       	ldi	r22, 0x06	; 6
    17ec:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D5,GET_BIT(data,1));
    17f0:	41 2f       	mov	r20, r17
    17f2:	46 95       	lsr	r20
    17f4:	41 70       	andi	r20, 0x01	; 1
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	65 e0       	ldi	r22, 0x05	; 5
    17fa:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D4,GET_BIT(data,0));
    17fe:	11 70       	andi	r17, 0x01	; 1
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	64 e0       	ldi	r22, 0x04	; 4
    1804:	41 2f       	mov	r20, r17
    1806:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,HIGH);
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	63 e0       	ldi	r22, 0x03	; 3
    180e:	41 e0       	ldi	r20, 0x01	; 1
    1810:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1814:	c7 01       	movw	r24, r14
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <vLCD_sendDATA+0xcc>
	_delay_ms(1);
	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,LOW);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	63 e0       	ldi	r22, 0x03	; 3
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1824:	c7 01       	movw	r24, r14
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <vLCD_sendDATA+0xdc>
	_delay_ms(1);
}
    182a:	1f 91       	pop	r17
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	08 95       	ret

00001832 <CLCD_voidSendNumber>:
}



void CLCD_voidSendNumber(s32 cpy_u32Number) //123
{      u32 cpy_u32power=1;
    1832:	6f 92       	push	r6
    1834:	7f 92       	push	r7
    1836:	8f 92       	push	r8
    1838:	9f 92       	push	r9
    183a:	af 92       	push	r10
    183c:	bf 92       	push	r11
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	7b 01       	movw	r14, r22
    184c:	8c 01       	movw	r16, r24
       s32 cpy_u32num=cpy_u32Number;
      if(cpy_u32Number==0)
    184e:	61 15       	cp	r22, r1
    1850:	71 05       	cpc	r23, r1
    1852:	81 05       	cpc	r24, r1
    1854:	91 05       	cpc	r25, r1
    1856:	21 f4       	brne	.+8      	; 0x1860 <CLCD_voidSendNumber+0x2e>
      {
    	  vLCD_sendDATA('0');
    1858:	80 e3       	ldi	r24, 0x30	; 48
    185a:	0e 94 a5 0b 	call	0x174a	; 0x174a <vLCD_sendDATA>
    185e:	5d c0       	rjmp	.+186    	; 0x191a <CLCD_voidSendNumber+0xe8>
    	  return;
      }
      if(cpy_u32Number<0)
    1860:	97 fd       	sbrc	r25, 7
    1862:	03 c0       	rjmp	.+6      	; 0x186a <CLCD_voidSendNumber+0x38>
    1864:	5b 01       	movw	r10, r22
    1866:	6c 01       	movw	r12, r24
    1868:	0a c0       	rjmp	.+20     	; 0x187e <CLCD_voidSendNumber+0x4c>
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    186a:	aa 24       	eor	r10, r10
    186c:	bb 24       	eor	r11, r11
    186e:	65 01       	movw	r12, r10
    1870:	a6 1a       	sub	r10, r22
    1872:	b7 0a       	sbc	r11, r23
    1874:	c8 0a       	sbc	r12, r24
    1876:	d9 0a       	sbc	r13, r25
    	  vLCD_sendDATA('-');
    1878:	8d e2       	ldi	r24, 0x2D	; 45
    187a:	0e 94 a5 0b 	call	0x174a	; 0x174a <vLCD_sendDATA>
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	69 2e       	mov	r6, r25
    1882:	71 2c       	mov	r7, r1
    1884:	81 2c       	mov	r8, r1
    1886:	91 2c       	mov	r9, r1
      }
      while(cpy_u32num)
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    1888:	c8 01       	movw	r24, r16
    188a:	b7 01       	movw	r22, r14
    188c:	2a e0       	ldi	r18, 0x0A	; 10
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__divmodsi4>
    1898:	c9 01       	movw	r24, r18
    189a:	da 01       	movw	r26, r20
    189c:	7c 01       	movw	r14, r24
    189e:	8d 01       	movw	r16, r26
    	  cpy_u32power=cpy_u32power*10;      //1000
    18a0:	c4 01       	movw	r24, r8
    18a2:	b3 01       	movw	r22, r6
    18a4:	2a e0       	ldi	r18, 0x0A	; 10
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__mulsi3>
    18b0:	3b 01       	movw	r6, r22
    18b2:	4c 01       	movw	r8, r24
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    	  vLCD_sendDATA('-');
      }
      while(cpy_u32num)
    18b4:	e1 14       	cp	r14, r1
    18b6:	f1 04       	cpc	r15, r1
    18b8:	01 05       	cpc	r16, r1
    18ba:	11 05       	cpc	r17, r1
    18bc:	29 f7       	brne	.-54     	; 0x1888 <CLCD_voidSendNumber+0x56>
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //1000
      }
      cpy_u32power=cpy_u32power/10;
    18be:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__udivmodsi4>
    18c2:	c9 01       	movw	r24, r18
    18c4:	da 01       	movw	r26, r20
    18c6:	3c 01       	movw	r6, r24
    18c8:	4d 01       	movw	r8, r26
    18ca:	22 c0       	rjmp	.+68     	; 0x1910 <CLCD_voidSendNumber+0xde>
      while(cpy_u32power>0)
      {
    	  cpy_u32num=cpy_u32Number/cpy_u32power;  //01234/1000=0
    18cc:	b5 01       	movw	r22, r10
    18ce:	c6 01       	movw	r24, r12
    18d0:	a4 01       	movw	r20, r8
    18d2:	93 01       	movw	r18, r6
    18d4:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__udivmodsi4>
    18d8:	12 2f       	mov	r17, r18
    	  cpy_u32Number%=cpy_u32power;
    18da:	b5 01       	movw	r22, r10
    18dc:	c6 01       	movw	r24, r12
    18de:	a4 01       	movw	r20, r8
    18e0:	93 01       	movw	r18, r6
    18e2:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__udivmodsi4>
    18e6:	ac 01       	movw	r20, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	da 01       	movw	r26, r20
    18ec:	5c 01       	movw	r10, r24
    18ee:	6d 01       	movw	r12, r26
    	  cpy_u32power/=10;
    18f0:	c4 01       	movw	r24, r8
    18f2:	b3 01       	movw	r22, r6
    18f4:	2a e0       	ldi	r18, 0x0A	; 10
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__udivmodsi4>
    1900:	c9 01       	movw	r24, r18
    1902:	da 01       	movw	r26, r20
    1904:	3c 01       	movw	r6, r24
    1906:	4d 01       	movw	r8, r26

    	  vLCD_sendDATA(cpy_u32num+'0');
    1908:	81 2f       	mov	r24, r17
    190a:	80 5d       	subi	r24, 0xD0	; 208
    190c:	0e 94 a5 0b 	call	0x174a	; 0x174a <vLCD_sendDATA>

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //1000
      }
      cpy_u32power=cpy_u32power/10;
      while(cpy_u32power>0)
    1910:	61 14       	cp	r6, r1
    1912:	71 04       	cpc	r7, r1
    1914:	81 04       	cpc	r8, r1
    1916:	91 04       	cpc	r9, r1
    1918:	c9 f6       	brne	.-78     	; 0x18cc <CLCD_voidSendNumber+0x9a>
      }




}
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	ff 90       	pop	r15
    1920:	ef 90       	pop	r14
    1922:	df 90       	pop	r13
    1924:	cf 90       	pop	r12
    1926:	bf 90       	pop	r11
    1928:	af 90       	pop	r10
    192a:	9f 90       	pop	r9
    192c:	8f 90       	pop	r8
    192e:	7f 90       	pop	r7
    1930:	6f 90       	pop	r6
    1932:	08 95       	ret

00001934 <vLCD_Convert_numTOchar>:
	}

}

void vLCD_Convert_numTOchar(u16 num)//-520
{
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ff 92       	push	r15
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	2a 97       	sbiw	r28, 0x0a	; 10
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	9c 01       	movw	r18, r24
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	6e 01       	movw	r12, r28
    1958:	08 94       	sec
    195a:	c1 1c       	adc	r12, r1
    195c:	d1 1c       	adc	r13, r1
    195e:	11 c0       	rjmp	.+34     	; 0x1982 <vLCD_Convert_numTOchar+0x4e>
	}

	while(num)//520
	{
		res=num%10;//0 2 5
		str[i]=res+'0';//'0' '2' '5'
    1960:	f6 01       	movw	r30, r12
    1962:	e4 0f       	add	r30, r20
    1964:	f1 1d       	adc	r31, r1
    1966:	c9 01       	movw	r24, r18
    1968:	6a e0       	ldi	r22, 0x0A	; 10
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__udivmodhi4>
    1970:	80 5d       	subi	r24, 0xD0	; 208
    1972:	80 83       	st	Z, r24
		num=num/10;//52  5  0
    1974:	c9 01       	movw	r24, r18
    1976:	6a e0       	ldi	r22, 0x0A	; 10
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__udivmodhi4>
    197e:	9b 01       	movw	r18, r22
		i++;//1 2 3 4
    1980:	4f 5f       	subi	r20, 0xFF	; 255
		num=num*(-1);
		vLCD_sendDATA('-');

	}

	while(num)//520
    1982:	21 15       	cp	r18, r1
    1984:	31 05       	cpc	r19, r1
    1986:	61 f7       	brne	.-40     	; 0x1960 <vLCD_Convert_numTOchar+0x2c>
		str[i]=res+'0';//'0' '2' '5'
		num=num/10;//52  5  0
		i++;//1 2 3 4

	}
	for(s8 j=i-1;j>=0;j--)
    1988:	f4 2e       	mov	r15, r20
    198a:	fa 94       	dec	r15
    198c:	0f 2d       	mov	r16, r15
    198e:	11 27       	eor	r17, r17
    1990:	07 fd       	sbrc	r16, 7
    1992:	10 95       	com	r17
    1994:	0c 0d       	add	r16, r12
    1996:	1d 1d       	adc	r17, r13
    1998:	07 c0       	rjmp	.+14     	; 0x19a8 <vLCD_Convert_numTOchar+0x74>
	{
		vLCD_sendDATA(str[j]);
    199a:	f8 01       	movw	r30, r16
    199c:	80 81       	ld	r24, Z
    199e:	0e 94 a5 0b 	call	0x174a	; 0x174a <vLCD_sendDATA>
		str[i]=res+'0';//'0' '2' '5'
		num=num/10;//52  5  0
		i++;//1 2 3 4

	}
	for(s8 j=i-1;j>=0;j--)
    19a2:	fa 94       	dec	r15
    19a4:	01 50       	subi	r16, 0x01	; 1
    19a6:	10 40       	sbci	r17, 0x00	; 0
    19a8:	f7 fe       	sbrs	r15, 7
    19aa:	f7 cf       	rjmp	.-18     	; 0x199a <vLCD_Convert_numTOchar+0x66>
	{
		vLCD_sendDATA(str[j]);
	}

}
    19ac:	2a 96       	adiw	r28, 0x0a	; 10
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	df 90       	pop	r13
    19c4:	cf 90       	pop	r12
    19c6:	08 95       	ret

000019c8 <vLCD_Send_String>:

#endif


void vLCD_Send_String(u8 * str)
{
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	ec 01       	movw	r28, r24
    19d0:	10 e0       	ldi	r17, 0x00	; 0
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <vLCD_Send_String+0x12>
	for(u8 i=0;str[i];i++)
	{
		vLCD_sendDATA(str[i]);
    19d4:	0e 94 a5 0b 	call	0x174a	; 0x174a <vLCD_sendDATA>
#endif


void vLCD_Send_String(u8 * str)
{
	for(u8 i=0;str[i];i++)
    19d8:	1f 5f       	subi	r17, 0xFF	; 255
    19da:	fe 01       	movw	r30, r28
    19dc:	e1 0f       	add	r30, r17
    19de:	f1 1d       	adc	r31, r1
    19e0:	80 81       	ld	r24, Z
    19e2:	88 23       	and	r24, r24
    19e4:	b9 f7       	brne	.-18     	; 0x19d4 <vLCD_Send_String+0xc>
	{
		vLCD_sendDATA(str[i]);
	}

}
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	08 95       	ret

000019ee <vLCD_sendCOMMAND>:
	_delay_ms(3);
	vLCD_sendCOMMAND(0b00000110);

}
void vLCD_sendCOMMAND(u8 command)
{
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	1f 93       	push	r17
    19f4:	18 2f       	mov	r17, r24
	vSet_Pin_OUTPUTvalue(RS_PORT,RS_PIN,LOW);
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(R_W_PORT,R_W_PIN,LOW);
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	62 e0       	ldi	r22, 0x02	; 2
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>


	vSet_Pin_OUTPUTvalue(DATA_PORT,D7,GET_BIT(command,7));
    1a0a:	41 2f       	mov	r20, r17
    1a0c:	44 1f       	adc	r20, r20
    1a0e:	44 27       	eor	r20, r20
    1a10:	44 1f       	adc	r20, r20
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	67 e0       	ldi	r22, 0x07	; 7
    1a16:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D6,GET_BIT(command,6));
    1a1a:	41 2f       	mov	r20, r17
    1a1c:	42 95       	swap	r20
    1a1e:	46 95       	lsr	r20
    1a20:	46 95       	lsr	r20
    1a22:	41 70       	andi	r20, 0x01	; 1
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	66 e0       	ldi	r22, 0x06	; 6
    1a28:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D5,GET_BIT(command,5));
    1a2c:	41 2f       	mov	r20, r17
    1a2e:	42 95       	swap	r20
    1a30:	46 95       	lsr	r20
    1a32:	41 70       	andi	r20, 0x01	; 1
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	65 e0       	ldi	r22, 0x05	; 5
    1a38:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D4,GET_BIT(command,4));
    1a3c:	41 2f       	mov	r20, r17
    1a3e:	42 95       	swap	r20
    1a40:	41 70       	andi	r20, 0x01	; 1
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	64 e0       	ldi	r22, 0x04	; 4
    1a46:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,HIGH);
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	63 e0       	ldi	r22, 0x03	; 3
    1a4e:	41 e0       	ldi	r20, 0x01	; 1
    1a50:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1a54:	20 ea       	ldi	r18, 0xA0	; 160
    1a56:	e2 2e       	mov	r14, r18
    1a58:	2f e0       	ldi	r18, 0x0F	; 15
    1a5a:	f2 2e       	mov	r15, r18
    1a5c:	c7 01       	movw	r24, r14
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <vLCD_sendCOMMAND+0x70>
	_delay_ms(1);
	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,LOW);
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	63 e0       	ldi	r22, 0x03	; 3
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1a6c:	c7 01       	movw	r24, r14
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <vLCD_sendCOMMAND+0x80>
	_delay_ms(1);
	vSet_Pin_OUTPUTvalue(DATA_PORT,D7,GET_BIT(command,3));
    1a72:	41 2f       	mov	r20, r17
    1a74:	46 95       	lsr	r20
    1a76:	46 95       	lsr	r20
    1a78:	46 95       	lsr	r20
    1a7a:	41 70       	andi	r20, 0x01	; 1
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	67 e0       	ldi	r22, 0x07	; 7
    1a80:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D6,GET_BIT(command,2));
    1a84:	41 2f       	mov	r20, r17
    1a86:	46 95       	lsr	r20
    1a88:	46 95       	lsr	r20
    1a8a:	41 70       	andi	r20, 0x01	; 1
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	66 e0       	ldi	r22, 0x06	; 6
    1a90:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D5,GET_BIT(command,1));
    1a94:	41 2f       	mov	r20, r17
    1a96:	46 95       	lsr	r20
    1a98:	41 70       	andi	r20, 0x01	; 1
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	65 e0       	ldi	r22, 0x05	; 5
    1a9e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(DATA_PORT,D4,GET_BIT(command,0));
    1aa2:	11 70       	andi	r17, 0x01	; 1
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	64 e0       	ldi	r22, 0x04	; 4
    1aa8:	41 2f       	mov	r20, r17
    1aaa:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,HIGH);
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	63 e0       	ldi	r22, 0x03	; 3
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1ab8:	c7 01       	movw	r24, r14
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <vLCD_sendCOMMAND+0xcc>
	_delay_ms(1);
	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,LOW);
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	63 e0       	ldi	r22, 0x03	; 3
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1ac8:	c7 01       	movw	r24, r14
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <vLCD_sendCOMMAND+0xdc>
	_delay_ms(1);
}
    1ace:	1f 91       	pop	r17
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	08 95       	ret

00001ad6 <vLCD_GO_TO>:
	_delay_ms(2);
}

void vLCD_GO_TO(u8 line ,u8 position )
{
	if(line==1)
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <vLCD_GO_TO+0xe>
	{
		vLCD_sendCOMMAND(0x80+position);
    1ada:	86 2f       	mov	r24, r22
    1adc:	80 58       	subi	r24, 0x80	; 128
    1ade:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <vLCD_sendCOMMAND>
    1ae2:	08 95       	ret
	}
	if(line==2)
    1ae4:	82 30       	cpi	r24, 0x02	; 2
    1ae6:	21 f4       	brne	.+8      	; 0x1af0 <vLCD_GO_TO+0x1a>
	{
		vLCD_sendCOMMAND(0x80+0x40+position);
    1ae8:	86 2f       	mov	r24, r22
    1aea:	80 54       	subi	r24, 0x40	; 64
    1aec:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <vLCD_sendCOMMAND>
    1af0:	08 95       	ret

00001af2 <vLCD_Clear>:

}

void vLCD_Clear()
{
	vLCD_sendCOMMAND(0b00000001);
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <vLCD_sendCOMMAND>
    1af8:	80 e4       	ldi	r24, 0x40	; 64
    1afa:	9f e1       	ldi	r25, 0x1F	; 31
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <vLCD_Clear+0xa>
	_delay_ms(2);
}
    1b00:	08 95       	ret

00001b02 <vLCD_init>:
}

#elif LCD_MODE==BIT_4

void vLCD_init(void)
{
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
	vSet_Pin_Direction(DATA_PORT,D7,OUTPUT);
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	67 e0       	ldi	r22, 0x07	; 7
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(DATA_PORT,D6,OUTPUT);
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	66 e0       	ldi	r22, 0x06	; 6
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(DATA_PORT,D5,OUTPUT);
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	65 e0       	ldi	r22, 0x05	; 5
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(DATA_PORT,D4,OUTPUT);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	64 e0       	ldi	r22, 0x04	; 4
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(RS_PORT,RS_PIN,OUTPUT);
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(R_W_PORT,R_W_PIN,OUTPUT);
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	62 e0       	ldi	r22, 0x02	; 2
    1b3c:	41 e0       	ldi	r20, 0x01	; 1
    1b3e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(E_PORT,E_PIN,OUTPUT);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	63 e0       	ldi	r22, 0x03	; 3
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
    1b4c:	80 e9       	ldi	r24, 0x90	; 144
    1b4e:	91 e0       	ldi	r25, 0x01	; 1
    1b50:	20 e9       	ldi	r18, 0x90	; 144
    1b52:	31 e0       	ldi	r19, 0x01	; 1
    1b54:	f9 01       	movw	r30, r18
    1b56:	31 97       	sbiw	r30, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <vLCD_init+0x54>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	d9 f7       	brne	.-10     	; 0x1b54 <vLCD_init+0x52>


	_delay_ms(40);
	vLCD_sendCOMMAND(0b00000010);
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <vLCD_sendCOMMAND>
	vLCD_sendCOMMAND(0b00101000);
    1b64:	88 e2       	ldi	r24, 0x28	; 40
    1b66:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <vLCD_sendCOMMAND>
    1b6a:	00 ea       	ldi	r16, 0xA0	; 160
    1b6c:	1f e0       	ldi	r17, 0x0F	; 15
    1b6e:	c8 01       	movw	r24, r16
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <vLCD_init+0x6e>
	_delay_ms(1);
	vLCD_sendCOMMAND(0b00001111);
    1b74:	8f e0       	ldi	r24, 0x0F	; 15
    1b76:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <vLCD_sendCOMMAND>
    1b7a:	c8 01       	movw	r24, r16
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <vLCD_init+0x7a>
	_delay_ms(1);
	vLCD_sendCOMMAND(0b00000001);
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <vLCD_sendCOMMAND>
    1b86:	80 ee       	ldi	r24, 0xE0	; 224
    1b88:	9e e2       	ldi	r25, 0x2E	; 46
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <vLCD_init+0x88>
	_delay_ms(3);
	vLCD_sendCOMMAND(0b00000110);
    1b8e:	86 e0       	ldi	r24, 0x06	; 6
    1b90:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <vLCD_sendCOMMAND>

}
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <u8KEY_PRESSED>:
	vSet_Pin_OUTPUTvalue(ROW4_PORT,ROW4_PIN,HIGH);


}
u8 u8KEY_PRESSED()
{
    1b9a:	7f 92       	push	r7
    1b9c:	8f 92       	push	r8
    1b9e:	9f 92       	push	r9
    1ba0:	af 92       	push	r10
    1ba2:	bf 92       	push	r11
    1ba4:	cf 92       	push	r12
    1ba6:	df 92       	push	r13
    1ba8:	ef 92       	push	r14
    1baa:	ff 92       	push	r15
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	38 e6       	ldi	r19, 0x68	; 104
    1bb6:	83 2e       	mov	r8, r19
    1bb8:	31 e0       	ldi	r19, 0x01	; 1
    1bba:	93 2e       	mov	r9, r19
    1bbc:	2c e6       	ldi	r18, 0x6C	; 108
    1bbe:	a2 2e       	mov	r10, r18
    1bc0:	21 e0       	ldi	r18, 0x01	; 1
    1bc2:	b2 2e       	mov	r11, r18
    1bc4:	94 e5       	ldi	r25, 0x54	; 84
    1bc6:	79 2e       	mov	r7, r25
    1bc8:	cc 24       	eor	r12, r12
    1bca:	dd 24       	eor	r13, r13
	u8 KEY= NO_KEY;
	for(u8 col=0;col<4;col++)
	{
		vSet_Pin_OUTPUTvalue(COL_PORT[col],COL_PIN[col],LOW);
    1bcc:	f4 01       	movw	r30, r8
    1bce:	80 81       	ld	r24, Z
    1bd0:	f5 01       	movw	r30, r10
    1bd2:	60 81       	ld	r22, Z
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1bda:	c0 e7       	ldi	r28, 0x70	; 112
    1bdc:	d1 e0       	ldi	r29, 0x01	; 1
    1bde:	04 e7       	ldi	r16, 0x74	; 116
    1be0:	11 e0       	ldi	r17, 0x01	; 1
    1be2:	88 e7       	ldi	r24, 0x78	; 120
    1be4:	e8 2e       	mov	r14, r24
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	f8 2e       	mov	r15, r24
    1bea:	ec 0c       	add	r14, r12
    1bec:	fd 1c       	adc	r15, r13
		for(u8 row=0;row<4;row++)
		{
			if(vGIT_PIN(ROW_PORT[row],ROW_PIN[row])==0)
    1bee:	88 81       	ld	r24, Y
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	60 81       	ld	r22, Z
    1bf4:	0e 94 57 0a 	call	0x14ae	; 0x14ae <vGIT_PIN>
    1bf8:	88 23       	and	r24, r24
    1bfa:	11 f4       	brne	.+4      	; 0x1c00 <u8KEY_PRESSED+0x66>
			{
				KEY=key_p[row][col];
    1bfc:	f7 01       	movw	r30, r14
    1bfe:	70 80       	ld	r7, Z
			}
			while(vGIT_PIN(ROW_PORT[row],ROW_PIN[row])==0);
    1c00:	88 81       	ld	r24, Y
    1c02:	f8 01       	movw	r30, r16
    1c04:	60 81       	ld	r22, Z
    1c06:	0e 94 57 0a 	call	0x14ae	; 0x14ae <vGIT_PIN>
    1c0a:	88 23       	and	r24, r24
    1c0c:	c9 f3       	breq	.-14     	; 0x1c00 <u8KEY_PRESSED+0x66>
    1c0e:	21 96       	adiw	r28, 0x01	; 1
    1c10:	0f 5f       	subi	r16, 0xFF	; 255
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
    1c14:	84 e0       	ldi	r24, 0x04	; 4
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	e8 0e       	add	r14, r24
    1c1a:	f9 1e       	adc	r15, r25
{
	u8 KEY= NO_KEY;
	for(u8 col=0;col<4;col++)
	{
		vSet_Pin_OUTPUTvalue(COL_PORT[col],COL_PIN[col],LOW);
		for(u8 row=0;row<4;row++)
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	c4 37       	cpi	r28, 0x74	; 116
    1c20:	d9 07       	cpc	r29, r25
    1c22:	29 f7       	brne	.-54     	; 0x1bee <u8KEY_PRESSED+0x54>
			{
				KEY=key_p[row][col];
			}
			while(vGIT_PIN(ROW_PORT[row],ROW_PIN[row])==0);
		}
		vSet_Pin_OUTPUTvalue(COL_PORT[col],COL_PIN[col],HIGH);
    1c24:	f4 01       	movw	r30, r8
    1c26:	81 91       	ld	r24, Z+
    1c28:	4f 01       	movw	r8, r30
    1c2a:	f5 01       	movw	r30, r10
    1c2c:	61 91       	ld	r22, Z+
    1c2e:	5f 01       	movw	r10, r30
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1c36:	08 94       	sec
    1c38:	c1 1c       	adc	r12, r1
    1c3a:	d1 1c       	adc	r13, r1

}
u8 u8KEY_PRESSED()
{
	u8 KEY= NO_KEY;
	for(u8 col=0;col<4;col++)
    1c3c:	f4 e0       	ldi	r31, 0x04	; 4
    1c3e:	cf 16       	cp	r12, r31
    1c40:	d1 04       	cpc	r13, r1
    1c42:	21 f6       	brne	.-120    	; 0x1bcc <u8KEY_PRESSED+0x32>
		}
		vSet_Pin_OUTPUTvalue(COL_PORT[col],COL_PIN[col],HIGH);
	}
	return KEY;

}
    1c44:	87 2d       	mov	r24, r7
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	df 90       	pop	r13
    1c54:	cf 90       	pop	r12
    1c56:	bf 90       	pop	r11
    1c58:	af 90       	pop	r10
    1c5a:	9f 90       	pop	r9
    1c5c:	8f 90       	pop	r8
    1c5e:	7f 90       	pop	r7
    1c60:	08 95       	ret

00001c62 <vKEYPAD_init>:

};

void vKEYPAD_init()
{
	vSet_Pin_Direction(COL1_PORT,COL1_PIN,OUTPUT);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	64 e0       	ldi	r22, 0x04	; 4
    1c66:	41 e0       	ldi	r20, 0x01	; 1
    1c68:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(COL2_PORT,COL2_PIN,OUTPUT);
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	65 e0       	ldi	r22, 0x05	; 5
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(COL3_PORT,COL3_PIN,OUTPUT);
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	66 e0       	ldi	r22, 0x06	; 6
    1c7a:	41 e0       	ldi	r20, 0x01	; 1
    1c7c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(COL4_PORT,COL4_PIN,OUTPUT);
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	67 e0       	ldi	r22, 0x07	; 7
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>

	vSet_Pin_Direction(ROW1_PORT,ROW1_PIN,INPUT);
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	63 e0       	ldi	r22, 0x03	; 3
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(ROW2_PORT,ROW2_PIN,INPUT);
    1c94:	82 e0       	ldi	r24, 0x02	; 2
    1c96:	64 e0       	ldi	r22, 0x04	; 4
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(ROW3_PORT,ROW3_PIN,INPUT);
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	65 e0       	ldi	r22, 0x05	; 5
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(ROW4_PORT,ROW4_PIN,INPUT);
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	66 e0       	ldi	r22, 0x06	; 6
    1cac:	40 e0       	ldi	r20, 0x00	; 0
    1cae:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>


	vSet_Pin_OUTPUTvalue(COL1_PORT,COL1_PIN,HIGH);
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	64 e0       	ldi	r22, 0x04	; 4
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(COL2_PORT,COL2_PIN,HIGH);
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	65 e0       	ldi	r22, 0x05	; 5
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(COL3_PORT,COL3_PIN,HIGH);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	66 e0       	ldi	r22, 0x06	; 6
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(COL4_PORT,COL4_PIN,HIGH);
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	67 e0       	ldi	r22, 0x07	; 7
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>


	vSet_Pin_OUTPUTvalue(ROW1_PORT,ROW1_PIN,HIGH);
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	63 e0       	ldi	r22, 0x03	; 3
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(ROW2_PORT,ROW2_PIN,HIGH);
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	64 e0       	ldi	r22, 0x04	; 4
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(ROW3_PORT,ROW3_PIN,HIGH);
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	65 e0       	ldi	r22, 0x05	; 5
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(ROW4_PORT,ROW4_PIN,HIGH);
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	66 e0       	ldi	r22, 0x06	; 6
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>


}
    1d02:	08 95       	ret

00001d04 <main>:
#include <util/delay.h>
#include <avr/io.h>

//MASTER
int main()
{
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
	vSet_Pin_Direction(PORT_B,PIN_4,OUTPUT);
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	64 e0       	ldi	r22, 0x04	; 4
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>

	vSet_Pin_Direction(PORT_B,PIN_5,OUTPUT);
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	65 e0       	ldi	r22, 0x05	; 5
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(PORT_B,PIN_6,INPUT);
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	66 e0       	ldi	r22, 0x06	; 6
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	vSet_Pin_Direction(PORT_B,PIN_7,OUTPUT);
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	67 e0       	ldi	r22, 0x07	; 7
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>

	vSet_Pin_Direction(PORT_A,PIN_0,OUTPUT);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vSet_Pin_Direction>
	u8 rec=0;
	SPI_INIT();
    1d3e:	0e 94 8d 08 	call	0x111a	; 0x111a <SPI_INIT>
    1d42:	00 ea       	ldi	r16, 0xA0	; 160
    1d44:	1f e0       	ldi	r17, 0x0F	; 15
    1d46:	c0 e9       	ldi	r28, 0x90	; 144
    1d48:	d1 e0       	ldi	r29, 0x01	; 1



	while(1)
	{
		vSet_Pin_OUTPUTvalue(PORT_B,PIN_4,HIGH);
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	64 e0       	ldi	r22, 0x04	; 4
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
    1d54:	c8 01       	movw	r24, r16
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <main+0x52>
		_delay_ms(1);
		vSet_Pin_OUTPUTvalue(PORT_B,PIN_4,LOW);
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	64 e0       	ldi	r22, 0x04	; 4
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vSet_Pin_OUTPUTvalue>
		rec= SPI_TRAS_RECIVE(55);
    1d64:	87 e3       	ldi	r24, 0x37	; 55
    1d66:	0e 94 96 08 	call	0x112c	; 0x112c <SPI_TRAS_RECIVE>



					if(rec==54)
    1d6a:	86 33       	cpi	r24, 0x36	; 54
    1d6c:	71 f7       	brne	.-36     	; 0x1d4a <main+0x46>
					{

						vTOGGLE_Pin(PORT_A,PIN_0);
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vTOGGLE_Pin>
    1d76:	88 e8       	ldi	r24, 0x88	; 136
    1d78:	93 e1       	ldi	r25, 0x13	; 19
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	31 97       	sbiw	r30, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <main+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d82:	d9 f7       	brne	.-10     	; 0x1d7a <main+0x76>
    1d84:	e2 cf       	rjmp	.-60     	; 0x1d4a <main+0x46>

00001d86 <__mulsi3>:
    1d86:	62 9f       	mul	r22, r18
    1d88:	d0 01       	movw	r26, r0
    1d8a:	73 9f       	mul	r23, r19
    1d8c:	f0 01       	movw	r30, r0
    1d8e:	82 9f       	mul	r24, r18
    1d90:	e0 0d       	add	r30, r0
    1d92:	f1 1d       	adc	r31, r1
    1d94:	64 9f       	mul	r22, r20
    1d96:	e0 0d       	add	r30, r0
    1d98:	f1 1d       	adc	r31, r1
    1d9a:	92 9f       	mul	r25, r18
    1d9c:	f0 0d       	add	r31, r0
    1d9e:	83 9f       	mul	r24, r19
    1da0:	f0 0d       	add	r31, r0
    1da2:	74 9f       	mul	r23, r20
    1da4:	f0 0d       	add	r31, r0
    1da6:	65 9f       	mul	r22, r21
    1da8:	f0 0d       	add	r31, r0
    1daa:	99 27       	eor	r25, r25
    1dac:	72 9f       	mul	r23, r18
    1dae:	b0 0d       	add	r27, r0
    1db0:	e1 1d       	adc	r30, r1
    1db2:	f9 1f       	adc	r31, r25
    1db4:	63 9f       	mul	r22, r19
    1db6:	b0 0d       	add	r27, r0
    1db8:	e1 1d       	adc	r30, r1
    1dba:	f9 1f       	adc	r31, r25
    1dbc:	bd 01       	movw	r22, r26
    1dbe:	cf 01       	movw	r24, r30
    1dc0:	11 24       	eor	r1, r1
    1dc2:	08 95       	ret

00001dc4 <__udivmodhi4>:
    1dc4:	aa 1b       	sub	r26, r26
    1dc6:	bb 1b       	sub	r27, r27
    1dc8:	51 e1       	ldi	r21, 0x11	; 17
    1dca:	07 c0       	rjmp	.+14     	; 0x1dda <__udivmodhi4_ep>

00001dcc <__udivmodhi4_loop>:
    1dcc:	aa 1f       	adc	r26, r26
    1dce:	bb 1f       	adc	r27, r27
    1dd0:	a6 17       	cp	r26, r22
    1dd2:	b7 07       	cpc	r27, r23
    1dd4:	10 f0       	brcs	.+4      	; 0x1dda <__udivmodhi4_ep>
    1dd6:	a6 1b       	sub	r26, r22
    1dd8:	b7 0b       	sbc	r27, r23

00001dda <__udivmodhi4_ep>:
    1dda:	88 1f       	adc	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	5a 95       	dec	r21
    1de0:	a9 f7       	brne	.-22     	; 0x1dcc <__udivmodhi4_loop>
    1de2:	80 95       	com	r24
    1de4:	90 95       	com	r25
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	08 95       	ret

00001dec <__udivmodsi4>:
    1dec:	a1 e2       	ldi	r26, 0x21	; 33
    1dee:	1a 2e       	mov	r1, r26
    1df0:	aa 1b       	sub	r26, r26
    1df2:	bb 1b       	sub	r27, r27
    1df4:	fd 01       	movw	r30, r26
    1df6:	0d c0       	rjmp	.+26     	; 0x1e12 <__udivmodsi4_ep>

00001df8 <__udivmodsi4_loop>:
    1df8:	aa 1f       	adc	r26, r26
    1dfa:	bb 1f       	adc	r27, r27
    1dfc:	ee 1f       	adc	r30, r30
    1dfe:	ff 1f       	adc	r31, r31
    1e00:	a2 17       	cp	r26, r18
    1e02:	b3 07       	cpc	r27, r19
    1e04:	e4 07       	cpc	r30, r20
    1e06:	f5 07       	cpc	r31, r21
    1e08:	20 f0       	brcs	.+8      	; 0x1e12 <__udivmodsi4_ep>
    1e0a:	a2 1b       	sub	r26, r18
    1e0c:	b3 0b       	sbc	r27, r19
    1e0e:	e4 0b       	sbc	r30, r20
    1e10:	f5 0b       	sbc	r31, r21

00001e12 <__udivmodsi4_ep>:
    1e12:	66 1f       	adc	r22, r22
    1e14:	77 1f       	adc	r23, r23
    1e16:	88 1f       	adc	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	1a 94       	dec	r1
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <__udivmodsi4_loop>
    1e1e:	60 95       	com	r22
    1e20:	70 95       	com	r23
    1e22:	80 95       	com	r24
    1e24:	90 95       	com	r25
    1e26:	9b 01       	movw	r18, r22
    1e28:	ac 01       	movw	r20, r24
    1e2a:	bd 01       	movw	r22, r26
    1e2c:	cf 01       	movw	r24, r30
    1e2e:	08 95       	ret

00001e30 <__divmodsi4>:
    1e30:	97 fb       	bst	r25, 7
    1e32:	09 2e       	mov	r0, r25
    1e34:	05 26       	eor	r0, r21
    1e36:	0e d0       	rcall	.+28     	; 0x1e54 <__divmodsi4_neg1>
    1e38:	57 fd       	sbrc	r21, 7
    1e3a:	04 d0       	rcall	.+8      	; 0x1e44 <__divmodsi4_neg2>
    1e3c:	d7 df       	rcall	.-82     	; 0x1dec <__udivmodsi4>
    1e3e:	0a d0       	rcall	.+20     	; 0x1e54 <__divmodsi4_neg1>
    1e40:	00 1c       	adc	r0, r0
    1e42:	38 f4       	brcc	.+14     	; 0x1e52 <__divmodsi4_exit>

00001e44 <__divmodsi4_neg2>:
    1e44:	50 95       	com	r21
    1e46:	40 95       	com	r20
    1e48:	30 95       	com	r19
    1e4a:	21 95       	neg	r18
    1e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4e:	4f 4f       	sbci	r20, 0xFF	; 255
    1e50:	5f 4f       	sbci	r21, 0xFF	; 255

00001e52 <__divmodsi4_exit>:
    1e52:	08 95       	ret

00001e54 <__divmodsi4_neg1>:
    1e54:	f6 f7       	brtc	.-4      	; 0x1e52 <__divmodsi4_exit>
    1e56:	90 95       	com	r25
    1e58:	80 95       	com	r24
    1e5a:	70 95       	com	r23
    1e5c:	61 95       	neg	r22
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	8f 4f       	sbci	r24, 0xFF	; 255
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	08 95       	ret

00001e66 <__prologue_saves__>:
    1e66:	2f 92       	push	r2
    1e68:	3f 92       	push	r3
    1e6a:	4f 92       	push	r4
    1e6c:	5f 92       	push	r5
    1e6e:	6f 92       	push	r6
    1e70:	7f 92       	push	r7
    1e72:	8f 92       	push	r8
    1e74:	9f 92       	push	r9
    1e76:	af 92       	push	r10
    1e78:	bf 92       	push	r11
    1e7a:	cf 92       	push	r12
    1e7c:	df 92       	push	r13
    1e7e:	ef 92       	push	r14
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	ca 1b       	sub	r28, r26
    1e90:	db 0b       	sbc	r29, r27
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	09 94       	ijmp

00001e9e <__epilogue_restores__>:
    1e9e:	2a 88       	ldd	r2, Y+18	; 0x12
    1ea0:	39 88       	ldd	r3, Y+17	; 0x11
    1ea2:	48 88       	ldd	r4, Y+16	; 0x10
    1ea4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ea6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ea8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eaa:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eac:	9b 84       	ldd	r9, Y+11	; 0x0b
    1eae:	aa 84       	ldd	r10, Y+10	; 0x0a
    1eb0:	b9 84       	ldd	r11, Y+9	; 0x09
    1eb2:	c8 84       	ldd	r12, Y+8	; 0x08
    1eb4:	df 80       	ldd	r13, Y+7	; 0x07
    1eb6:	ee 80       	ldd	r14, Y+6	; 0x06
    1eb8:	fd 80       	ldd	r15, Y+5	; 0x05
    1eba:	0c 81       	ldd	r16, Y+4	; 0x04
    1ebc:	1b 81       	ldd	r17, Y+3	; 0x03
    1ebe:	aa 81       	ldd	r26, Y+2	; 0x02
    1ec0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ec2:	ce 0f       	add	r28, r30
    1ec4:	d1 1d       	adc	r29, r1
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	ed 01       	movw	r28, r26
    1ed2:	08 95       	ret

00001ed4 <_exit>:
    1ed4:	f8 94       	cli

00001ed6 <__stop_program>:
    1ed6:	ff cf       	rjmp	.-2      	; 0x1ed6 <__stop_program>
